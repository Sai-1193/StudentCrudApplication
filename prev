import React, { useState, useEffect } from 'react';
import { Button, Modal, Box, Select, MenuItem, InputLabel, FormControl } from '@mui/material';
import axios from 'axios';

const FetchPreviousRecords: React.FC = () => {
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [carId, setCarId] = useState<string>('');
    const [application, setApplication] = useState<string>('');
    const [records, setRecords] = useState<any[]>([]);
    const [selectedRecord, setSelectedRecord] = useState<any>(null);

    const toggleModal = () => setIsModalOpen(!isModalOpen);

    const fetchRecords = async () => {
        try {
            const response = await axios.get(`/api/records?carId=${carId}&application=${application}`);
            setRecords(response.data);
        } catch (error) {
            console.error('Error fetching records:', error);
        }
    };

    const handleView = () => {
        fetchRecords();
    };

    const handleOk = () => {
        // Handle the OK action, perhaps set the selected record in your form
        console.log('Selected Record:', selectedRecord);
        setIsModalOpen(false);
    };

    return (
        <div>
            <Button variant="contained" color="primary" onClick={toggleModal}>
                Fetch Previous
            </Button>

            <Modal open={isModalOpen} onClose={toggleModal}>
                <Box sx={{ padding: 2, backgroundColor: 'white', borderRadius: 2 }}>
                    <FormControl fullWidth sx={{ marginBottom: 2 }}>
                        <InputLabel>Car ID</InputLabel>
                        <Select
                            value={carId}
                            onChange={(e) => setCarId(e.target.value)}
                        >
                            {/* Replace with actual CAR ID options */}
                            <MenuItem value="1">Car 1</MenuItem>
                            <MenuItem value="2">Car 2</MenuItem>
                        </Select>
                    </FormControl>
                    
                    <FormControl fullWidth sx={{ marginBottom: 2 }}>
                        <InputLabel>Application</InputLabel>
                        <Select
                            value={application}
                            onChange={(e) => setApplication(e.target.value)}
                        >
                            {/* Replace with actual APPLICATION options */}
                            <MenuItem value="app1">Application 1</MenuItem>
                            <MenuItem value="app2">Application 2</MenuItem>
                        </Select>
                    </FormControl>

                    <Button variant="contained" onClick={handleView}>
                        View
                    </Button>

                    <div>
                        {records.map((record) => (
                            <div key={record.uuid} onClick={() => setSelectedRecord(record)}>
                                <span>{record.uuid}</span> - <span>{record.lastModified}</span>
                            </div>
                        ))}
                    </div>

                    <Button variant="contained" onClick={handleOk}>
                        OK
                    </Button>
                </Box>
            </Modal>
        </div>
    );
};

export default FetchPreviousRecords;
