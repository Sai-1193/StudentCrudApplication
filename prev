import React, { useState, useEffect } from 'react';
import { Button, Modal, Box, Select, MenuItem, InputLabel, FormControl } from '@mui/material';
import axios from 'axios';

const FetchPreviousRecords: React.FC = () => {
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [carId, setCarId] = useState<string>('');
    const [application, setApplication] = useState<string>('');
    const [records, setRecords] = useState<any[]>([]);
    const [selectedRecord, setSelectedRecord] = useState<any>(null);

    const toggleModal = () => setIsModalOpen(!isModalOpen);

    const fetchRecords = async () => {
        try {
            const response = await axios.get(`/api/records?carId=${carId}&application=${application}`);
            setRecords(response.data);
        } catch (error) {
            console.error('Error fetching records:', error);
        }
    };

    const handleView = () => {
        fetchRecords();
    };

    const handleOk = () => {
        // Handle the OK action, perhaps set the selected record in your form
        console.log('Selected Record:', selectedRecord);
        setIsModalOpen(false);
    };

    return (
        <div>
            <Button variant="contained" color="primary" onClick={toggleModal}>
                Fetch Previous
            </Button>

            <Modal open={isModalOpen} onClose={toggleModal}>
                <Box sx={{ padding: 2, backgroundColor: 'white', borderRadius: 2 }}>
                    <FormControl fullWidth sx={{ marginBottom: 2 }}>
                        <InputLabel>Car ID</InputLabel>
                        <Select
                            value={carId}
                            onChange={(e) => setCarId(e.target.value)}
                        >
                            {/* Replace with actual CAR ID options */}
                            <MenuItem value="1">Car 1</MenuItem>
                            <MenuItem value="2">Car 2</MenuItem>
                        </Select>
                    </FormControl>
                    
                    <FormControl fullWidth sx={{ marginBottom: 2 }}>
                        <InputLabel>Application</InputLabel>
                        <Select
                            value={application}
                            onChange={(e) => setApplication(e.target.value)}
                        >
                            {/* Replace with actual APPLICATION options */}
                            <MenuItem value="app1">Application 1</MenuItem>
                            <MenuItem value="app2">Application 2</MenuItem>
                        </Select>
                    </FormControl>

                    <Button variant="contained" onClick={handleView}>
                        View
                    </Button>

                    <div>
                        {records.map((record) => (
                            <div key={record.uuid} onClick={() => setSelectedRecord(record)}>
                                <span>{record.uuid}</span> - <span>{record.lastModified}</span>
                            </div>
                        ))}
                    </div>

                    <Button variant="contained" onClick={handleOk}>
                        OK
                    </Button>
                </Box>
            </Modal>
        </div>
    );
};

export default FetchPreviousRecords;




import React, { useEffect, useState } from 'react';
import { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';

const FormWithYamlView: React.FC = () => {
  const [isFetchModalOpen, setIsFetchModalOpen] = useState(false);
  const [carIds, setCarIds] = useState<number[]>([]);
  const [applications, setApplications] = useState<string[]>([]);
  const [selectedCarId, setSelectedCarId] = useState<number | null>(null);
  const [selectedApplication, setSelectedApplication] = useState<string>('');
  const [uuid, setUuid] = useState<string>('');
  const [results, setResults] = useState<any[]>([]);

  const toggleFetchModal = () => setIsFetchModalOpen(!isFetchModalOpen);

  useEffect(() => {
    // Fetch car IDs
    const fetchCarIds = async () => {
      const response = await fetch('/api/carIds'); // Replace with your actual endpoint
      const data = await response.json();
      setCarIds(data);
    };

    // Fetch application names
    const fetchApplications = async () => {
      const response = await fetch('/api/applications'); // Replace with your actual endpoint
      const data = await response.json();
      setApplications(data);
    };

    fetchCarIds();
    fetchApplications();
  }, []);

  const handleFetchResults = async () => {
    if (selectedCarId && selectedApplication) {
      const response = await fetch(`/api/view?carId=${selectedCarId}&application=${selectedApplication}`); // Replace with your actual endpoint
      const data = await response.json();
      setResults(data); // Update results based on selections
    }
  };

  return (
    <div>
      <Button onClick={toggleFetchModal}>Fetch Previous</Button>

      <Modal isOpen={isFetchModalOpen} toggle={toggleFetchModal}>
        <ModalHeader toggle={toggleFetchModal}>Fetch Previous Data</ModalHeader>
        <ModalBody>
          <div>
            <label>Car ID</label>
            <select value={selectedCarId || ''} onChange={(e) => setSelectedCarId(Number(e.target.value))}>
              <option value="" disabled>Select Car ID</option>
              {carIds.map((id) => (
                <option key={id} value={id}>{id}</option>
              ))}
            </select>
          </div>
          <div>
            <label>Application Name</label>
            <select value={selectedApplication} onChange={(e) => setSelectedApplication(e.target.value)}>
              <option value="" disabled>Select Application</option>
              {applications.map((app) => (
                <option key={app} value={app}>{app}</option>
              ))}
            </select>
          </div>
          <div>
            <label>UUID</label>
            <input
              type="text"
              value={uuid}
              onChange={(e) => setUuid(e.target.value)}
              style={{ width: '100%' }}
            />
          </div>
          <div>
            <Button onClick={handleFetchResults}>View</Button>
          </div>
          <div>
            <h4>Results:</h4>
            <ul>
              {results.map((result, index) => (
                <li key={index}>{JSON.stringify(result)}</li> // Modify this to display the desired result structure
              ))}
            </ul>
          </div>
        </ModalBody>
        <ModalFooter>
          <Button onClick={toggleFetchModal}>Cancel</Button>
        </ModalFooter>
      </Modal>
    </div>
  );
};

export default FormWithYamlView;

