To implement OnBeforeRequest and OnAfterResponse for each function (GET, POST, PUT) using go-resty, you can define custom interceptor functions for each HTTP method. Here's an example of how to do this:


package main

import (
    "fmt"
    "github.com/go-resty/resty/v2"
)

func customBeforeRequest(req *resty.Request, resp *resty.Response) error {
    // Custom logic to execute before making the request
    fmt.Printf("Before %s request to %s\n", req.Method, req.URL)
    return nil
}

func customAfterResponse(req *resty.Request, resp *resty.Response) error {
    // Custom logic to execute after receiving the response
    fmt.Printf("After %s request to %s\n", req.Method, req.URL)
    fmt.Printf("Response Status Code: %d\n", resp.StatusCode())
    return nil
}

func makeGETRequest() {
    client := resty.New()

    // Set custom interceptor functions for the GET request
    client.OnBeforeRequest(customBeforeRequest)
    client.OnAfterResponse(customAfterResponse)

    // Make a GET request
    response, err := client.R().Get("https://api.example.com/get-endpoint")
    if err != nil {
        fmt.Println("GET Request Error:", err)
    }
    fmt.Println("GET Response Body:", response.String())
}

func makePOSTRequest() {
    client := resty.New()

    // Set custom interceptor functions for the POST request
    client.OnBeforeRequest(customBeforeRequest)
    client.OnAfterResponse(customAfterResponse)

    // Make a POST request
    response, err := client.R().
        SetHeader("Content-Type", "application/json").
        SetBody([]byte(`{"key": "value"}`)).
        Post("https://api.example.com/post-endpoint")
    if err != nil {
        fmt.Println("POST Request Error:", err)
    }
    fmt.Println("POST Response Body:", response.String())
}

func makePUTRequest() {
    client := resty.New()

    // Set custom interceptor functions for the PUT request
    client.OnBeforeRequest(customBeforeRequest)
    client.OnAfterResponse(customAfterResponse)

    // Make a PUT request
    response, err := client.R().
        SetHeader("Content-Type", "application/json").
        SetBody([]byte(`{"key": "new-value"}`)).
        Put("https://api.example.com/put-endpoint")
    if err != nil {
        fmt.Println("PUT Request Error:", err)
    }
    fmt.Println("PUT Response Body:", response.String())
}

func main() {
    makeGETRequest()
    makePOSTRequest()
    makePUTRequest()
}
