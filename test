package myapi_test

import (
    . "github.com/onsi/ginkgo"
    . "github.com/onsi/gomega"
    "github.com/go-resty/resty/v2"
    "encoding/json"
    "os"
)

var _ = Describe("My API Tests", func() {
    var (
        client *resty.Client
    )

    BeforeEach(func() {
        // Setup client before each test
        client = resty.New()
    })

    AfterEach(func() {
        // Cleanup after each test if needed
    })

    It("should make GET request", func() {
        // Make GET request
        resp, err := client.R().Get("http://example.com/api/resource")
        Expect(err).NotTo(HaveOccurred())
        Expect(resp.StatusCode()).To(Equal(200))
    })

    It("should make POST request", func() {
        // Load test data from JSON file
        file, err := os.Open("testdata/post_data.json")
        Expect(err).NotTo(HaveOccurred())
        defer file.Close()

        // Parse JSON data
        var postData map[string]interface{}
        err = json.NewDecoder(file).Decode(&postData)
        Expect(err).NotTo(HaveOccurred())

        // Make POST request with JSON data
        resp, err := client.R().
            SetHeader("Content-Type", "application/json").
            SetBody(postData).
            Post("http://example.com/api/resource")
        Expect(err).NotTo(HaveOccurred())
        Expect(resp.StatusCode()).To(Equal(201))
    })

    It("should make PUT request", func() {
        // Load test data from JSON file
        file, err := os.Open("testdata/put_data.json")
        Expect(err).NotTo(HaveOccurred())
        defer file.Close()

        // Parse JSON data
        var putData map[string]interface{}
        err = json.NewDecoder(file).Decode(&putData)
        Expect(err).NotTo(HaveOccurred())

        // Make PUT request with JSON data
        resp, err := client.R().
            SetHeader("Content-Type", "application/json").
            SetBody(putData).
            Put("http://example.com/api/resource/123")
        Expect(err).NotTo(HaveOccurred())
        Expect(resp.StatusCode()).To(Equal(200))
    })
})




package myapi_test

import (
    . "github.com/onsi/ginkgo"
    . "github.com/onsi/gomega"
    "github.com/go-resty/resty/v2"
    "sync"
    "path/to/your/postman/package"
)

var _ = Describe("My API Tests", func() {
    var (
        client *resty.Client
    )

    BeforeEach(func() {
        // Setup client before each test
        client = resty.New()
    })

    AfterEach(func() {
        // Cleanup after each test if needed
    })

    It("should make GET request", func() {
        // Mock necessary parameters
        var wg sync.WaitGroup
        item := &postman.CollectionItem{
            // Define your item properties here
        }
        variable := &postman.CollectionVariable{
            // Define your variable properties here
        }

        // Call the method under test
        err := makeGetRequest(&wg, item, variable, client)
        
        // Assert expectations
        Expect(err).NotTo(HaveOccurred())
        // Add more assertions if needed
    })
})

// Example test_data.json
{
    "items": [
        {
            "name": "GET Request",
            "request": {
                "url": {
                    "raw": "http://example.com/api/resource",
                    "protocol": "http",
                    "host": [
                        "example.com"
                    ],
                    "path": [
                        "api",
                        "resource"
                    ]
                },
                "method": "GET"
            }
        },
        {
            "name": "POST Request",
            "request": {
                "url": {
                    "raw": "http://example.com/api/resource",
                    "protocol": "http",
                    "host": [
                        "example.com"
                    ],
                    "path": [
                        "api",
                        "resource"
                    ]
                },
                "method": "POST",
                "body": {
                    "mode": "raw",
                    "raw": "{\"key\": \"value\"}"
                }
            }
        }
    ],
    "variables": [
        {
            "id": "1",
            "key": "variable_key_1",
            "value": "variable_value_1"
        },
        {
            "id": "2",
            "key": "variable_key_2",
            "value": "variable_value_2"
        }
    ]
}

package myapi_test

import (
    . "github.com/onsi/ginkgo"
    . "github.com/onsi/gomega"
    "github.com/go-resty/resty/v2"
    "sync"
    "encoding/json"
    "os"
)

var _ = Describe("My API Tests", func() {
    var (
        client *resty.Client
        testData struct {
            Items     []*postman.CollectionItem         `json:"items"`
            Variables []*postman.CollectionVariable     `json:"variables"`
        }
    )

    BeforeEach(func() {
        // Setup client before each test
        client = resty.New()
    })

    AfterEach(func() {
        // Cleanup after each test if needed
    })

    BeforeSuite(func() {
        // Parse JSON test data file
        file, err := os.Open("test_data.json")
        Expect(err).NotTo(HaveOccurred())
        defer file.Close()

        // Decode JSON data
        decoder := json.NewDecoder(file)
        err = decoder.Decode(&testData)
        Expect(err).NotTo(HaveOccurred())
    })

    It("should make GET request for each item", func() {
        // Iterate over items and perform GET requests
        var wg sync.WaitGroup
        for _, item := range testData.Items {
            wg.Add(1)
            go func(item *postman.CollectionItem) {
                defer wg.Done()
                err := makeRequest(&wg, item, client)
                Expect(err).NotTo(HaveOccurred())
            }(item)
        }
        wg.Wait()
    })

    It("should make POST request for each item", func() {
        // Iterate over items and perform POST requests
        var wg sync.WaitGroup
        for _, item := range testData.Items {
            wg.Add(1)
            go func(item *postman.CollectionItem) {
                defer wg.Done()
                err := makeRequest(&wg, item, client)
                Expect(err).NotTo(HaveOccurred())
            }(item)
        }
        wg.Wait()
    })

    It("should make PUT request for each item", func() {
        // Iterate over items and perform PUT requests
        var wg sync.WaitGroup
        for _, item := range testData.Items {
            wg.Add(1)
            go func(item *postman.CollectionItem) {
                defer wg.Done()
                err := makeRequest(&wg, item, client)
                Expect(err).NotTo(HaveOccurred())
            }(item)
        }
        wg.Wait()
    })

    It("should make DELETE request for each item", func() {
        // Iterate over items and perform DELETE requests
        var wg sync.WaitGroup
        for _, item := range testData.Items {
            wg.Add(1)
            go func(item *postman.CollectionItem) {
                defer wg.Done()
                err := makeRequest(&wg, item, client)
                Expect(err).NotTo(HaveOccurred())
            }(item)
        }
        wg.Wait()
    })

    It("should test each variable", func() {
        // Test each variable
        for _, variable := range testData.Variables {
            // Implement your test logic for variables
            // For example, check if the variable values are valid
            Expect(variable.ID).ToNot(BeEmpty())
            Expect(variable.Key).ToNot(BeEmpty())
            Expect(variable.Value).ToNot(BeEmpty())
        }
    })
})

func makeRequest(wg *sync.WaitGroup, item *postman.CollectionItem, client *resty.Client) error {
    defer wg.Done()
    // Implement your request logic here
    return nil
}



package myapi_test

import (
    . "github.com/onsi/ginkgo"
    . "github.com/onsi/gomega"
    "github.com/go-resty/resty/v2"
    "sync"
    "encoding/json"
    "os"
)

var _ = Describe("My API Tests", func() {
    var (
        client *resty.Client
        testData struct {
            Items     []*postman.CollectionItem         `json:"items"`
            Variables []*postman.CollectionVariable     `json:"variables"`
        }
    )

    BeforeEach(func() {
        // Setup client before each test
        client = resty.New()
    })

    AfterEach(func() {
        // Cleanup after each test if needed
    })

    BeforeSuite(func() {
        // Parse JSON test data file
        file, err := os.Open("path/to/your/test_data.json")
        Expect(err).NotTo(HaveOccurred())
        defer file.Close()

        // Decode JSON data
        decoder := json.NewDecoder(file)
        err = decoder.Decode(&testData)
        Expect(err).NotTo(HaveOccurred())
    })

    It("should make GET request for each item", func() {
        // Iterate over items and perform GET requests
        var wg sync.WaitGroup
        for _, item := range testData.Items {
            wg.Add(1)
            go func(item *postman.CollectionItem) {
                defer wg.Done()
                err := makeRequest(&wg, item, client)
                Expect(err).NotTo(HaveOccurred())
            }(item)
        }
        wg.Wait()
    })

    It("should make POST request for each item", func() {
        // Iterate over items and perform POST requests
        var wg sync.WaitGroup
        for _, item := range testData.Items {
            wg.Add(1)
            go func(item *postman.CollectionItem) {
                defer wg.Done()
                err := makeRequest(&wg, item, client)
                Expect(err).NotTo(HaveOccurred())
            }(item)
        }
        wg.Wait()
    })

    It("should make PUT request for each item", func() {
        // Iterate over items and perform PUT requests
        var wg sync.WaitGroup
        for _, item := range testData.Items {
            wg.Add(1)
            go func(item *postman.CollectionItem) {
                defer wg.Done()
                err := makeRequest(&wg, item, client)
                Expect(err).NotTo(HaveOccurred())
            }(item)
        }
        wg.Wait()
    })

    It("should make DELETE request for each item", func() {
        // Iterate over items and perform DELETE requests
        var wg sync.WaitGroup
        for _, item := range testData.Items {
            wg.Add(1)
            go func(item *postman.CollectionItem) {
                defer wg.Done()
                err := makeRequest(&wg, item, client)
                Expect(err).NotTo(HaveOccurred())
            }(item)
        }
        wg.Wait()
    })

    It("should test each variable", func() {
        // Test each variable
        for _, variable := range testData.Variables {
            // Implement your test logic for variables
            // For example, check if the variable values are valid
            Expect(variable.ID).ToNot(BeEmpty())
            Expect(variable.Key).ToNot(BeEmpty())
            Expect(variable.Value).ToNot(BeEmpty())
        }
    })
})

func makeRequest(wg *sync.WaitGroup, item *postman.CollectionItem, client *resty.Client) error {
    defer wg.Done()
    // Implement your request logic here
    return nil
}



