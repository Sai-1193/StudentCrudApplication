import React, { useEffect, useState } from "react";
import { Grid, Box, Button, Modal, ModalHeader, ModalBody, ModalFooter, IconButton } from "@mui/material";
import YAML from "js-yaml";

interface Test {
    testName: string;
    api: string;
    method: string;
    // Define other properties as needed
}

interface Service {
    serviceName: string;
    tests: Test[];
}

interface FormState {
    services: Service[];
}

const FormWithYamlView: React.FC = () => {
    const [formState, setFormState] = useState<FormState>({ services: [] });
    const [newServiceName, setNewServiceName] = useState<string>("");
    const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
    const [yamlStr, setYamlStr] = useState<string>("");

    useEffect(() => {
        updateYamlString(formState);
    }, [formState]);

    const updateYamlString = (state: FormState) => {
        const yamlString = YAML.dump(state);
        setYamlStr(yamlString);
    };

    const addService = () => {
        const newService: Service = {
            serviceName: newServiceName,
            tests: [] // Initialize with an empty array of tests
        };
        setFormState((prev) => ({
            services: [...prev.services, newService]
        }));
        setNewServiceName("");
        setIsModalOpen(false);
    };

    return (
        <Box sx={{ width: "100%" }}>
            <Grid container spacing={2}>
                <Grid item xs={6}>
                    <Button onClick={() => setIsModalOpen(true)}>Add Service</Button>
                    {formState.services.map((service, index) => (
                        <Box key={index} sx={{ borderBottom: "1px solid #e8e8e8", padding: 2 }}>
                            <h4>{service.serviceName}</h4>
                            <IconButton onClick={() => {/* Edit Service logic */}}>Edit</IconButton>
                            <IconButton onClick={() => {/* Delete Service logic */}}>Delete</IconButton>
                        </Box>
                    ))}
                </Grid>
                <Grid item xs={6}>
                    <pre>{yamlStr}</pre>
                </Grid>
            </Grid>
            <Modal open={isModalOpen} onClose={() => setIsModalOpen(false)}>
                <ModalHeader>Add Service</ModalHeader>
                <ModalBody>
                    <input
                        value={newServiceName}
                        onChange={(e) => setNewServiceName(e.target.value)}
                        placeholder="Service Name"
                    />
                </ModalBody>
                <ModalFooter>
                    <Button onClick={() => setIsModalOpen(false)}>Cancel</Button>
                    <Button onClick={addService}>Add</Button>
                </ModalFooter>
            </Modal>
        </Box>
    );
};

export default FormWithYamlView;




import React, { useEffect, useState } from "react";
import { Grid, Box, Button, Modal, ModalHeader, ModalBody, ModalFooter, IconButton } from "@mui/material";
import YAML from "js-yaml";

interface Test {
    testName: string;
    api: string;
    method: string;
}

interface Service {
    serviceName: string;
    tests: Test[];
}

interface FormState {
    services: Service[];
}

const FormWithYamlView: React.FC = () => {
    const [formState, setFormState] = useState<FormState>({ services: [] });
    const [newServiceName, setNewServiceName] = useState<string>("");
    const [newTestName, setNewTestName] = useState<string>("");
    const [newTestApi, setNewTestApi] = useState<string>("");
    const [newTestMethod, setNewTestMethod] = useState<string>("");
    const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
    const [editingServiceIndex, setEditingServiceIndex] = useState<number | null>(null);
    const [yamlStr, setYamlStr] = useState<string>("");

    useEffect(() => {
        updateYamlString(formState);
    }, [formState]);

    const updateYamlString = (state: FormState) => {
        const yamlString = YAML.dump(state);
        setYamlStr(yamlString);
    };

    const openModalForAdd = () => {
        setNewServiceName("");
        setNewTestName("");
        setNewTestApi("");
        setNewTestMethod("");
        setEditingServiceIndex(null);
        setIsModalOpen(true);
    };

    const openModalForEdit = (index: number) => {
        setNewServiceName(formState.services[index].serviceName);
        setEditingServiceIndex(index);
        setIsModalOpen(true);
    };

    const addOrUpdateService = () => {
        if (editingServiceIndex !== null) {
            // Update existing service
            const updatedService = { ...formState.services[editingServiceIndex], serviceName: newServiceName };
            setFormState((prev) => {
                const updatedServices = [...prev.services];
                updatedServices[editingServiceIndex] = updatedService;
                return { services: updatedServices };
            });
        } else {
            // Add new service
            const newService: Service = {
                serviceName: newServiceName,
                tests: [] // Initialize with an empty array of tests
            };
            setFormState((prev) => ({
                services: [...prev.services, newService]
            }));
        }
        resetFields();
    };

    const addTestToService = () => {
        if (editingServiceIndex !== null) {
            const newTest: Test = {
                testName: newTestName,
                api: newTestApi,
                method: newTestMethod,
            };
            setFormState((prev) => {
                const updatedServices = [...prev.services];
                updatedServices[editingServiceIndex].tests.push(newTest);
                return { services: updatedServices };
            });
            resetTestFields();
        }
    };

    const deleteService = (index: number) => {
        setFormState((prev) => {
            const updatedServices = prev.services.filter((_, i) => i !== index);
            return { services: updatedServices };
        });
    };

    const resetFields = () => {
        setNewServiceName("");
        setIsModalOpen(false);
    };

    const resetTestFields = () => {
        setNewTestName("");
        setNewTestApi("");
        setNewTestMethod("");
    };

    return (
        <Box sx={{ width: "100%" }}>
            <Grid container spacing={2}>
                <Grid item xs={6}>
                    <Button onClick={openModalForAdd}>Add Service</Button>
                    {formState.services.map((service, index) => (
                        <Box key={index} sx={{ borderBottom: "1px solid #e8e8e8", padding: 2 }}>
                            <h4>{service.serviceName}</h4>
                            <Button onClick={() => openModalForEdit(index)}>Edit</Button>
                            <Button onClick={() => deleteService(index)}>Delete</Button>
                            <div>
                                {service.tests.map((test, testIndex) => (
                                    <div key={testIndex}>
                                        <strong>{test.testName}</strong> (API: {test.api}, Method: {test.method})
                                    </div>
                                ))}
                                <input
                                    value={newTestName}
                                    onChange={(e) => setNewTestName(e.target.value)}
                                    placeholder="Test Name"
                                />
                                <input
                                    value={newTestApi}
                                    onChange={(e) => setNewTestApi(e.target.value)}
                                    placeholder="API"
                                />
                                <input
                                    value={newTestMethod}
                                    onChange={(e) => setNewTestMethod(e.target.value)}
                                    placeholder="Method"
                                />
                                <Button onClick={addTestToService}>Add Test</Button>
                            </div>
                        </Box>
                    ))}
                </Grid>
                <Grid item xs={6}>
                    <pre>{yamlStr}</pre>
                </Grid>
            </Grid>
            <Modal open={isModalOpen} onClose={() => setIsModalOpen(false)}>
                <ModalHeader>{editingServiceIndex !== null ? "Edit Service" : "Add Service"}</ModalHeader>
                <ModalBody>
                    <input
                        value={newServiceName}
                        onChange={(e) => setNewServiceName(e.target.value)}
                        placeholder="Service Name"
                    />
                </ModalBody>
                <ModalFooter>
                    <Button onClick={() => setIsModalOpen(false)}>Cancel</Button>
                    <Button onClick={addOrUpdateService}>{editingServiceIndex !== null ? "Update" : "Add"}</Button>
                </ModalFooter>
            </Modal>
        </Box>
    );
};

export default FormWithYamlView;
