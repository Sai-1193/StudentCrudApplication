
limport React, { useEffect, useState } from 'react';

const CreateForm: React.FC<{ onChange: (data: FormState) => void }> = ({ onChange }) => {
  // Set initial state with default values
  const [carId, setCarId] = useState<number>(0);
  const [applicationName, setApplicationName] = useState<string>('');
  const [services, setServices] = useState<Service[]>([]);
  const [variables, setVariables] = useState<Variable[]>([]);

  // Function to simulate an API call
  const fetchData = async () => {
    try {
      const response = await fetch('/api/formData'); // Adjust the URL as needed
      const data: FormState | null = await response.json();
      
      // Check if data is valid and set state accordingly
      if (data) {
        setCarId(data.car_id || 0);
        setApplicationName(data.application_name || '');
        setServices(data.services || []);
        setVariables(data.variables || []);
      } else {
        console.warn('No data returned from API. Using default values.');
      }
      
      // Notify parent component of the new data
      onChange({ car_id: carId, application_name: applicationName, services, variables });
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  useEffect(() => {
    fetchData(); // Fetch data when component mounts
  }, []);

  // Handlers for main form fields
  const handleCarIdChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = Number(e.target.value);
    setCarId(value);
    onChange({ car_id: value, application_name: applicationName, services, variables });
  };

  const handleApplicationNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setApplicationName(value);
    onChange({ car_id: carId, application_name: value, services, variables });
  };

  // Service management
  const handleAddService = () => {
    const newService: Service = { serviceName: '', tests: [] };
    setServices((prev) => {
      const updated = [...prev, newService];
      onChange({ car_id: carId, application_name: applicationName, services: updated, variables });
      return updated;
    });
  };

  const handleServiceChange = (index: number, value: string) => {
    const updatedServices = [...services];
    updatedServices[index].serviceName = value;
    setServices(updatedServices);
    onChange({ car_id: carId, application_name: applicationName, services: updatedServices, variables });
  };

  const handleDeleteService = (index: number) => {
    const updatedServices = services.filter((_, i) => i !== index);
    setServices(updatedServices);
    onChange({ car_id: carId, application_name: applicationName, services: updatedServices, variables });
  };

  // Test management
  const handleAddTest = (serviceIndex: number) => {
    const newTest: Test = {
      testName: '',
      api: '',
      method: '',
      request: {
        auth: {
          type: '',
          username: '',
          password: '',
          token: '',
        },
        headers: {
          pre_header_var: [],
          required: [],
        },
        body: {
          pre_request_var: [],
          required: [],
        },
      },
      response: {
        headers: {
          required: [],
        },
        expect: {
          statusCode: [],
          required: [],
        },
      },
    };
    
    const updatedServices = [...services];
    updatedServices[serviceIndex].tests.push(newTest);
    setServices(updatedServices);
    onChange({ car_id: carId, application_name: applicationName, services: updatedServices, variables });
  };

  const handleTestChange = (serviceIndex: number, testIndex: number, field: keyof Test, value: string) => {
    const updatedServices = [...services];
    updatedServices[serviceIndex].tests[testIndex][field] = value;
    setServices(updatedServices);
    onChange({ car_id: carId, application_name: applicationName, services: updatedServices, variables });
  };

  const handleDeleteTest = (serviceIndex: number, testIndex: number) => {
    const updatedServices = [...services];
    updatedServices[serviceIndex].tests.splice(testIndex, 1);
    setServices(updatedServices);
    onChange({ car_id: carId, application_name: applicationName, services: updatedServices, variables });
  };

  return (
    <div>
      <h2>Create Application</h2>
      <div>
        <label>Car ID:</label>
        <input type="number" value={carId} onChange={handleCarIdChange} />
      </div>
      <div>
        <label>Application Name:</label>
        <input type="text" value={applicationName} onChange={handleApplicationNameChange} />
      </div>

      <h3>Services</h3>
      {services.map((service, serviceIndex) => (
        <div key={serviceIndex}>
          <input
            type="text"
            placeholder="Service Name"
            value={service.serviceName}
            onChange={(e) => handleServiceChange(serviceIndex, e.target.value)}
          />
          <button type="button" onClick={() => handleDeleteService(serviceIndex)}>Delete Service</button>

          <h4>Tests</h4>
          {service.tests.map((test, testIndex) => (
            <div key={testIndex}>
              <input
                type="text"
                placeholder="Test Name"
                value={test.testName}
                onChange={(e) => handleTestChange(serviceIndex, testIndex, 'testName', e.target.value)}
              />
              <input
                type="text"
                placeholder="API"
                value={test.api}
                onChange={(e) => handleTestChange(serviceIndex, testIndex, 'api', e.target.value)}
              />
              <input
                type="text"
                placeholder="Method"
                value={test.method}
                onChange={(e) => handleTestChange(serviceIndex, testIndex, 'method', e.target.value)}
              />
              <button type="button" onClick={() => handleDeleteTest(serviceIndex, testIndex)}>Delete Test</button>
            </div>
          ))}
          <button type="button" onClick={() => handleAddTest(serviceIndex)}>Add Test</button>
        </div>
      ))}
      <button type="button" onClick={handleAddService}>Add Service</button>
    </div>
  );
};

export default CreateForm;




import React, { useState } from 'react';

interface TestModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (test: Test) => void;
}

const TestModal: React.FC<TestModalProps> = ({ isOpen, onClose, onSave }) => {
  const [testName, setTestName] = useState('');
  const [api, setApi] = useState('');
  const [method, setMethod] = useState('');

  const handleSave = () => {
    const newTest: Test = {
      testName,
      api,
      method,
      request: { auth: { type: '', username: '', password: '', token: '' }, headers: { pre_header_var: [], required: [] }, body: { pre_request_var: [], required: [] } },
      response: { headers: { required: [] }, expect: { statusCode: [], required: [] } },
    };
    onSave(newTest);
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="modal">
      <h2>Add Test</h2>
      <div>
        <label>Test Name:</label>
        <input type="text" value={testName} onChange={(e) => setTestName(e.target.value)} />
      </div>
      <div>
        <label>API:</label>
        <input type="text" value={api} onChange={(e) => setApi(e.target.value)} />
      </div>
      <div>
        <label>Method:</label>
        <input type="text" value={method} onChange={(e) => setMethod(e.target.value)} />
      </div>
      <button onClick={handleSave}>Save</button>
      <button onClick={onClose}>Cancel</button>
    </div>
  );
};

export default TestModal;



import React, { useEffect, useState } from 'react';
import TestModal from './TestModal';

const CreateForm: React.FC<{ onChange: (data: FormState) => void }> = ({ onChange }) => {
  const [carId, setCarId] = useState<number>(0);
  const [applicationName, setApplicationName] = useState<string>('');
  const [services, setServices] = useState<Service[]>([]);
  const [modalOpen, setModalOpen] = useState(false);
  const [currentServiceIndex, setCurrentServiceIndex] = useState<number | null>(null);

  const fetchData = async () => {
    // Fetch data logic remains the same...
  };

  useEffect(() => {
    fetchData(); // Fetch data when component mounts
  }, []);

  const handleAddService = () => {
    const newService: Service = { serviceName: '', tests: [] };
    setServices((prev) => [...prev, newService]);
  };

  const handleAddTest = (serviceIndex: number) => {
    setCurrentServiceIndex(serviceIndex);
    setModalOpen(true);
  };

  const handleSaveTest = (test: Test) => {
    if (currentServiceIndex !== null) {
      const updatedServices = [...services];
      updatedServices[currentServiceIndex].tests.push(test);
      setServices(updatedServices);
      onChange({ car_id: carId, application_name: applicationName, services: updatedServices, variables });
    }
  };

  const handleCloseModal = () => {
    setModalOpen(false);
    setCurrentServiceIndex(null);
  };

  return (
    <div>
      <h2>Create Application</h2>
      <div>
        <label>Car ID:</label>
        <input type="number" value={carId} onChange={(e) => setCarId(Number(e.target.value))} />
      </div>
      <div>
        <label>Application Name:</label>
        <input type="text" value={applicationName} onChange={(e) => setApplicationName(e.target.value)} />
      </div>

      <h3>Services</h3>
      {services.map((service, serviceIndex) => (
        <div key={serviceIndex}>
          <input
            type="text"
            placeholder="Service Name"
            value={service.serviceName}
            onChange={(e) => handleServiceChange(serviceIndex, e.target.value)}
          />
          <button type="button" onClick={() => handleDeleteService(serviceIndex)}>Delete Service</button>

          <h4>Tests</h4>
          {service.tests.map((test, testIndex) => (
            <div key={testIndex}>
              <input
                type="text"
                placeholder="Test Name"
                value={test.testName}
                onChange={(e) => handleTestChange(serviceIndex, testIndex, 'testName', e.target.value)}
              />
              <input
                type="text"
                placeholder="API"
                value={test.api}
                onChange={(e) => handleTestChange(serviceIndex, testIndex, 'api', e.target.value)}
              />
              <input
                type="text"
                placeholder="Method"
                value={test.method}
                onChange={(e) => handleTestChange(serviceIndex, testIndex, 'method', e.target.value)}
              />
              <button type="button" onClick={() => handleDeleteTest(serviceIndex, testIndex)}>Delete Test</button>
            </div>
          ))}
          <button type="button" onClick={() => handleAddTest(serviceIndex)}>Add Test</button>
        </div>
      ))}
      <button type="button" onClick={handleAddService}>Add Service</button>

      <TestModal isOpen={modalOpen} onClose={handleCloseModal} onSave={handleSaveTest} />
    </div>
  );
};

export default CreateForm;









import React, { useState } from 'react';
import { Test } from './types'; // Ensure this path is correct

interface TestModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (test: Test) => void;
}

const TestModal: React.FC<TestModalProps> = ({ isOpen, onClose, onSave }) => {
  const [testName, setTestName] = useState('');
  const [api, setApi] = useState('');
  const [method, setMethod] = useState<string>('GET'); // Default to GET
  const [preHeaderVars, setPreHeaderVars] = useState<string[]>([]);
  const [requiredHeaders, setRequiredHeaders] = useState<string[]>([]);
  const [preRequestVars, setPreRequestVars] = useState<string[]>([]);
  const [requiredBodyFields, setRequiredBodyFields] = useState<string[]>([]);
  const [requestBody, setRequestBody] = useState('');

  const handleSave = () => {
    const newTest: Test = {
      testName,
      api,
      method,
      request: {
        auth: { type: '', username: '', password: '', token: '' },
        headers: { pre_header_var: preHeaderVars, required: requiredHeaders },
        body: { pre_request_var: preRequestVars, required: requiredBodyFields, request_body: requestBody },
      },
      response: { headers: { required: [] }, expect: { statusCode: [], required: [] } },
    };
    onSave(newTest);
    onClose();
  };

  const addPreHeaderVar = () => setPreHeaderVars((prev) => [...prev, '']);
  const deletePreHeaderVar = (index: number) => setPreHeaderVars((prev) => prev.filter((_, i) => i !== index));
  const addRequiredHeader = () => setRequiredHeaders((prev) => [...prev, '']);
  const deleteRequiredHeader = (index: number) => setRequiredHeaders((prev) => prev.filter((_, i) => i !== index));
  const addPreRequestVar = () => setPreRequestVars((prev) => [...prev, '']);
  const deletePreRequestVar = (index: number) => setPreRequestVars((prev) => prev.filter((_, i) => i !== index));
  const addRequiredBodyField = () => setRequiredBodyFields((prev) => [...prev, '']);
  const deleteRequiredBodyField = (index: number) => setRequiredBodyFields((prev) => prev.filter((_, i) => i !== index));

  const handleInputChange = (index: number, value: string, setter: React.Dispatch<React.SetStateAction<string[]>>) => {
    setter((prev) => {
      const updated = [...prev];
      updated[index] = value;
      return updated;
    });
  };

  if (!isOpen) return null;

  return (
    <div className="modal">
      <h2>Add Test</h2>
      <div>
        <label>Test Name:</label>
        <input type="text" value={testName} onChange={(e) => setTestName(e.target.value)} />
      </div>
      <div>
        <label>API:</label>
        <input type="text" value={api} onChange={(e) => setApi(e.target.value)} />
      </div>
      <div>
        <label>Method:</label>
        <div>
          {['GET', 'POST', 'PUT', 'DELETE'].map((m) => (
            <label key={m}>
              <input
                type="radio"
                value={m}
                checked={method === m}
                onChange={() => setMethod(m)}
              />
              {m}
            </label>
          ))}
        </div>
      </div>

      <h3>Headers</h3>
      <h4>Pre-Header Variables</h4>
      {preHeaderVars.map((varName, index) => (
        <div key={index}>
          <input
            type="text"
            value={varName}
            onChange={(e) => handleInputChange(index, e.target.value, setPreHeaderVars)}
          />
          <button onClick={() => deletePreHeaderVar(index)}>Delete</button>
        </div>
      ))}
      <button onClick={addPreHeaderVar}>Add Pre-Header Variable</button>

      <h4>Required Headers</h4>
      {requiredHeaders.map((header, index) => (
        <div key={index}>
          <input
            type="text"
            value={header}
            onChange={(e) => handleInputChange(index, e.target.value, setRequiredHeaders)}
          />
          <button onClick={() => deleteRequiredHeader(index)}>Delete</button>
        </div>
      ))}
      <button onClick={addRequiredHeader}>Add Required Header</button>

      <h3>Body</h3>
      <h4>Pre-Request Variables</h4>
      {preRequestVars.map((varName, index) => (
        <div key={index}>
          <input
            type="text"
            value={varName}
            onChange={(e) => handleInputChange(index, e.target.value, setPreRequestVars)}
          />
          <button onClick={() => deletePreRequestVar(index)}>Delete</button>
        </div>
      ))}
      <button onClick={addPreRequestVar}>Add Pre-Request Variable</button>

      <h4>Required Request Body Fields</h4>
      {requiredBodyFields.map((field, index) => (
        <div key={index}>
          <input
            type="text"
            value={field}
            onChange={(e) => handleInputChange(index, e.target.value, setRequiredBodyFields)}
          />
          <button onClick={() => deleteRequiredBodyField(index)}>Delete</button>
        </div>
      ))}
      <button onClick={addRequiredBodyField}>Add Required Body Field</button>

      <div>
        <label>Request Body:</label>
        <textarea value={requestBody} onChange={(e) => setRequestBody(e.target.value)} />
      </div>

      <button onClick={handleSave}>Save</button>
      <button onClick={onClose}>Cancel</button>
    </div>
  );
};

export default TestModal;


