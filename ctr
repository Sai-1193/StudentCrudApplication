import React, { useEffect, useState } from 'react';

const CreateForm: React.FC<{ onChange: (data: FormState) => void }> = ({ onChange }) => {
  // Set initial state with default values
  const [carId, setCarId] = useState<number>(0);
  const [applicationName, setApplicationName] = useState<string>('');
  const [services, setServices] = useState<Service[]>([]);
  const [variables, setVariables] = useState<Variable[]>([]);

  // Function to simulate an API call
  const fetchData = async () => {
    try {
      const response = await fetch('/api/formData'); // Adjust the URL as needed
      const data: FormState | null = await response.json();
      
      // Check if data is valid and set state accordingly
      if (data) {
        setCarId(data.car_id || 0);
        setApplicationName(data.application_name || '');
        setServices(data.services || []);
        setVariables(data.variables || []);
      } else {
        console.warn('No data returned from API. Using default values.');
      }
      
      // Notify parent component of the new data
      onChange({ car_id: carId, application_name: applicationName, services, variables });
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  useEffect(() => {
    fetchData(); // Fetch data when component mounts
  }, []);

  // Handlers for main form fields
  const handleCarIdChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = Number(e.target.value);
    setCarId(value);
    onChange({ car_id: value, application_name: applicationName, services, variables });
  };

  const handleApplicationNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setApplicationName(value);
    onChange({ car_id: carId, application_name: value, services, variables });
  };

  // Service management
  const handleAddService = () => {
    const newService: Service = { serviceName: '', tests: [] };
    setServices((prev) => {
      const updated = [...prev, newService];
      onChange({ car_id: carId, application_name: applicationName, services: updated, variables });
      return updated;
    });
  };

  const handleServiceChange = (index: number, value: string) => {
    const updatedServices = [...services];
    updatedServices[index].serviceName = value;
    setServices(updatedServices);
    onChange({ car_id: carId, application_name: applicationName, services: updatedServices, variables });
  };

  const handleDeleteService = (index: number) => {
    const updatedServices = services.filter((_, i) => i !== index);
    setServices(updatedServices);
    onChange({ car_id: carId, application_name: applicationName, services: updatedServices, variables });
  };

  // Test management
  const handleAddTest = (serviceIndex: number) => {
    const newTest: Test = {
      testName: '',
      api: '',
      method: '',
      request: {
        auth: {
          type: '',
          username: '',
          password: '',
          token: '',
        },
        headers: {
          pre_header_var: [],
          required: [],
        },
        body: {
          pre_request_var: [],
          required: [],
        },
      },
      response: {
        headers: {
          required: [],
        },
        expect: {
          statusCode: [],
          required: [],
        },
      },
    };
    
    const updatedServices = [...services];
    updatedServices[serviceIndex].tests.push(newTest);
    setServices(updatedServices);
    onChange({ car_id: carId, application_name: applicationName, services: updatedServices, variables });
  };

  const handleTestChange = (serviceIndex: number, testIndex: number, field: keyof Test, value: string) => {
    const updatedServices = [...services];
    updatedServices[serviceIndex].tests[testIndex][field] = value;
    setServices(updatedServices);
    onChange({ car_id: carId, application_name: applicationName, services: updatedServices, variables });
  };

  const handleDeleteTest = (serviceIndex: number, testIndex: number) => {
    const updatedServices = [...services];
    updatedServices[serviceIndex].tests.splice(testIndex, 1);
    setServices(updatedServices);
    onChange({ car_id: carId, application_name: applicationName, services: updatedServices, variables });
  };

  return (
    <div>
      <h2>Create Application</h2>
      <div>
        <label>Car ID:</label>
        <input type="number" value={carId} onChange={handleCarIdChange} />
      </div>
      <div>
        <label>Application Name:</label>
        <input type="text" value={applicationName} onChange={handleApplicationNameChange} />
      </div>

      <h3>Services</h3>
      {services.map((service, serviceIndex) => (
        <div key={serviceIndex}>
          <input
            type="text"
            placeholder="Service Name"
            value={service.serviceName}
            onChange={(e) => handleServiceChange(serviceIndex, e.target.value)}
          />
          <button type="button" onClick={() => handleDeleteService(serviceIndex)}>Delete Service</button>

          <h4>Tests</h4>
          {service.tests.map((test, testIndex) => (
            <div key={testIndex}>
              <input
                type="text"
                placeholder="Test Name"
                value={test.testName}
                onChange={(e) => handleTestChange(serviceIndex, testIndex, 'testName', e.target.value)}
              />
              <input
                type="text"
                placeholder="API"
                value={test.api}
                onChange={(e) => handleTestChange(serviceIndex, testIndex, 'api', e.target.value)}
              />
              <input
                type="text"
                placeholder="Method"
                value={test.method}
                onChange={(e) => handleTestChange(serviceIndex, testIndex, 'method', e.target.value)}
              />
              <button type="button" onClick={() => handleDeleteTest(serviceIndex, testIndex)}>Delete Test</button>
            </div>
          ))}
          <button type="button" onClick={() => handleAddTest(serviceIndex)}>Add Test</button>
        </div>
      ))}
      <button type="button" onClick={handleAddService}>Add Service</button>
    </div>
  );
};

export default CreateForm;
