func getRequest(openAPI OpenAPI, path string) {
	// Check if the path exists in the OpenAPI document
	if details, ok := openAPI.Paths[path]; ok {
		// Check if the GET method is defined for the path
		if methodDetails, ok := details["get"]; ok {
			// Extract tags if defined for the path
			tags := extractTags(openAPI, path)
			// Find the corresponding server description for the first tag in the path
			serverDescription := findServerDescription(openAPI, tags)

			// Construct URL based on the selected server description
			url := constructURL(openAPI, path, serverDescription)

			// Extract authentication details
			auth := extractAuth(openAPI, path, "get")

			fmt.Printf("Sending GET request to %s\n", url)

			// Create request
			req := client.R()

			// Add authentication if available
			if auth != "" {
				req = req.SetHeader("Authorization", auth)
			}

			// Extract example parameter values from the OpenAPI specification
			parameterValues := extractExampleParameterValues(openAPI, path)

			// Add path parameters to the URL
			for paramName, paramValue := range parameterValues {
				url = strings.ReplaceAll(url, "{"+paramName+"}", paramValue)
			}

			// Send request
			resp, err := req.Get(url)
			if err != nil {
				log.Fatalf("Error sending GET request: %s", err)
			}

			fmt.Println("Response:", resp)
		} else {
			fmt.Printf("GET method not defined for path: %s\n", path)
		}
	} else {
		fmt.Printf("Path not found: %s\


func extractExampleParameterValues(openAPI OpenAPI, path string, method string) map[string]string {
	parameterValues := make(map[string]string)

	// Check if the path exists in the OpenAPI document
	if details, ok := openAPI.Paths[path]; ok {
		// Check if the method is defined for the path
		if methodDetails, ok := details[method]; ok {
			// Extract parameters if defined
			for _, param := range methodDetails.Parameters {
				if param.In == "path" {
					// Extract example value if available
					if example, ok := param.Example.(string); ok {
						parameterValues[param.Name] = example
					}
				}
			}
		}
	}

	return parameterValues
}

