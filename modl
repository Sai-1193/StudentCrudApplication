const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
const [currentServiceIndex, setCurrentServiceIndex] = useState<number | null>(null);
const [currentTestIndex, setCurrentTestIndex] = useState<number | null>(null);
const [testName, setTestName] = useState<string>("");
const [api, setApi] = useState<string>("");


const addTest = () => {
  if (currentServiceIndex !== null) {
    const newTest: Test = { testName, api };
    
    setFormState(prevState => {
      const updatedServices = [...prevState.Services];
      updatedServices[currentServiceIndex] = {
        ...updatedServices[currentServiceIndex],
        tests: [...updatedServices[currentServiceIndex].tests, newTest]
      };
      return { ...prevState, Services: updatedServices };
    });

    // Reset input fields
    setTestName("");
    setApi("");

    // Close the modal
    setIsModalOpen(false);
  }
};

const openModal = (index: number) => {
  setCurrentServiceIndex(index);
  setIsModalOpen(true);
};

const handleTestNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {
  setTestName(event.target.value);
};

const handleApiChange = (event: React.ChangeEvent<HTMLInputElement>) => {
  setApi(event.target.value);
};




const openModalForAdd = (index: number) => {
  setCurrentServiceIndex(index);
  setCurrentTestIndex(null);
  setTestName("");
  setApi("");
  setIsModalOpen(true);
};

const openModalForEdit = (serviceIndex: number, testIndex: number) => {
  const test = formState.Services[serviceIndex].tests[testIndex];
  setCurrentServiceIndex(serviceIndex);
  setCurrentTestIndex(testIndex);
  setTestName(test.testName);
  setApi(test.api);
  setIsModalOpen(true);
};

const saveTest = () => {
  if (currentServiceIndex !== null) {
    const updatedServices = [...formState.Services];

    if (currentTestIndex === null) {
      // Adding new test
      const newTest: Test = { testName, api };
      updatedServices[currentServiceIndex] = {
        ...updatedServices[currentServiceIndex],
        tests: [...updatedServices[currentServiceIndex].tests, newTest]
      };
    } else {
      // Editing existing test
      const updatedTest: Test = { testName, api };
      updatedServices[currentServiceIndex] = {
        ...updatedServices[currentServiceIndex],
        tests: updatedServices[currentServiceIndex].tests.map((test, index) =>
          index === currentTestIndex ? updatedTest : test
        )
      };
    }

    setFormState({ ...formState, Services: updatedServices });

    // Reset input fields and close the modal
    setTestName("");
    setApi("");
    setIsModalOpen(false);
  }
};
return (
  <div>
    <h1>Application: {formState.AppName}</h1>
    {formState.Services.map((service, index) => (
      <div key={index}>
        <h2>Service: {service.ServiceName}</h2>
        <button onClick={() => openModalForAdd(index)}>Add Test</button>
        <ul>
          {service.tests.map((test, testIndex) => (
            <li key={testIndex}>
              {test.testName} - {test.api}
              <button onClick={() => openModalForEdit(index, testIndex)}>Edit</button>
            </li>
          ))}
        </ul>
      </div>
    ))}

    {isModalOpen && (
      <div className="modal">
        <h2>{currentTestIndex === null ? "Add Test" : "Edit Test"}</h2>
        <label>
          Test Name:
          <input type="text" value={testName} onChange={e => setTestName(e.target.value)} />
        </label>
        <label>
          API:
          <input type="text" value={api} onChange={e => setApi(e.target.value)} />
        </label>
        <button onClick={saveTest}>Save</button>
        <button onClick={() => setIsModalOpen(false)}>Cancel</button>
      </div>
    )}
  </div>
);


