const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
const [currentServiceIndex, setCurrentServiceIndex] = useState<number | null>(null);
const [currentTestIndex, setCurrentTestIndex] = useState<number | null>(null);
const [testName, setTestName] = useState<string>("");
const [api, setApi] = useState<string>("");


const addTest = () => {
  if (currentServiceIndex !== null) {
    const newTest: Test = { testName, api };
    
    setFormState(prevState => {
      const updatedServices = [...prevState.Services];
      updatedServices[currentServiceIndex] = {
        ...updatedServices[currentServiceIndex],
        tests: [...updatedServices[currentServiceIndex].tests, newTest]
      };
      return { ...prevState, Services: updatedServices };
    });

    // Reset input fields
    setTestName("");
    setApi("");

    // Close the modal
    setIsModalOpen(false);
  }
};

const openModal = (index: number) => {
  setCurrentServiceIndex(index);
  setIsModalOpen(true);
};

const handleTestNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {
  setTestName(event.target.value);
};

const handleApiChange = (event: React.ChangeEvent<HTMLInputElement>) => {
  setApi(event.target.value);
};




const openModalForAdd = (index: number) => {
  setCurrentServiceIndex(index);
  setCurrentTestIndex(null);
  setTestName("");
  setApi("");
  setIsModalOpen(true);
};

const openModalForEdit = (serviceIndex: number, testIndex: number) => {
  const test = formState.Services[serviceIndex].tests[testIndex];
  setCurrentServiceIndex(serviceIndex);
  setCurrentTestIndex(testIndex);
  setTestName(test.testName);
  setApi(test.api);
  setIsModalOpen(true);
};

const saveTest = () => {
  if (currentServiceIndex !== null) {
    const updatedServices = [...formState.Services];

    if (currentTestIndex === null) {
      // Adding new test
      const newTest: Test = { testName, api };
      updatedServices[currentServiceIndex] = {
        ...updatedServices[currentServiceIndex],
        tests: [...updatedServices[currentServiceIndex].tests, newTest]
      };
    } else {
      // Editing existing test
      const updatedTest: Test = { testName, api };
      updatedServices[currentServiceIndex] = {
        ...updatedServices[currentServiceIndex],
        tests: updatedServices[currentServiceIndex].tests.map((test, index) =>
          index === currentTestIndex ? updatedTest : test
        )
      };
    }

    setFormState({ ...formState, Services: updatedServices });

    // Reset input fields and close the modal
    setTestName("");
    setApi("");
    setIsModalOpen(false);
  }
};
return (
  <div>
    <h1>Application: {formState.AppName}</h1>
    {formState.Services.map((service, index) => (
      <div key={index}>
        <h2>Service: {service.ServiceName}</h2>
        <button onClick={() => openModalForAdd(index)}>Add Test</button>
        <ul>
          {service.tests.map((test, testIndex) => (
            <li key={testIndex}>
              {test.testName} - {test.api}
              <button onClick={() => openModalForEdit(index, testIndex)}>Edit</button>
            </li>
          ))}
        </ul>
      </div>
    ))}

    {isModalOpen && (
      <div className="modal">
        <h2>{currentTestIndex === null ? "Add Test" : "Edit Test"}</h2>
        <label>
          Test Name:
          <input type="text" value={testName} onChange={e => setTestName(e.target.value)} />
        </label>
        <label>
          API:
          <input type="text" value={api} onChange={e => setApi(e.target.value)} />
        </label>
        <button onClick={saveTest}>Save</button>
        <button onClick={() => setIsModalOpen(false)}>Cancel</button>
      </div>
    )}
  </div>
);







const [authType, setAuthType] = useState<string>("");
const [username, setUsername] = useState<string>("");
const [password, setPassword] = useState<string>("");
const [token, setToken] = useState<string>("");

const addTest = () => {
  if (currentServiceIndex !== null) {
    const newTest: Test = { 
      testName, 
      api, 
      auth: { type: authType, username, password, token } 
    };
    
    setFormState(prevState => {
      const updatedServices = [...prevState.Services];
      updatedServices[currentServiceIndex] = {
        ...updatedServices[currentServiceIndex],
        tests: [...updatedServices[currentServiceIndex].tests, newTest]
      };
      return { ...prevState, Services: updatedServices };
    });

    // Reset input fields
    setTestName("");
    setApi("");
    setAuthType("");
    setUsername("");
    setPassword("");
    setToken("");

    // Close the modal
    setIsModalOpen(false);
  }
};

const saveTest = () => {
  if (currentServiceIndex !== null) {
    const updatedServices = [...formState.Services];

    if (currentTestIndex === null) {
      // Adding new test
      const newTest: Test = { 
        testName, 
        api, 
        auth: { type: authType, username, password, token } 
      };
      updatedServices[currentServiceIndex] = {
        ...updatedServices[currentServiceIndex],
        tests: [...updatedServices[currentServiceIndex].tests, newTest]
      };
    } else {
      // Editing existing test
      const updatedTest: Test = { 
        testName, 
        api, 
        auth: { type: authType, username, password, token } 
      };
      updatedServices[currentServiceIndex] = {
        ...updatedServices[currentServiceIndex],
        tests: updatedServices[currentServiceIndex].tests.map((test, index) =>
          index === currentTestIndex ? updatedTest : test
        )
      };
    }

    setFormState({ ...formState, Services: updatedServices });

    // Reset input fields and close the modal
    setTestName("");
    setApi("");
    setAuthType("");
    setUsername("");
    setPassword("");
    setToken("");
    setIsModalOpen(false);
  }
};


const openModalForEdit = (serviceIndex: number, testIndex: number) => {
  const test = formState.Services[serviceIndex].tests[testIndex];
  setCurrentServiceIndex(serviceIndex);
  setCurrentTestIndex(testIndex);
  setTestName(test.testName);
  setApi(test.api);
  setAuthType(test.auth.type);
  setUsername(test.auth.username || "");
  setPassword(test.auth.password || "");
  setToken(test.auth.token || "");
  setIsModalOpen(true);
};

{isModalOpen && (
  <div className="modal">
    <h2>{currentTestIndex === null ? "Add Test" : "Edit Test"}</h2>
    <label>
      Test Name:
      <input type="text" value={testName} onChange={e => setTestName(e.target.value)} />
    </label>
    <label>
      API:
      <input type="text" value={api} onChange={e => setApi(e.target.value)} />
    </label>
    <label>
      Authentication Type:
      <select value={authType} onChange={e => setAuthType(e.target.value)}>
        <option value="">Select Auth Type</option>
        <option value="basic">Basic</option>
        <option value="bearer">Bearer</option>
      </select>
    </label>
    {authType === "basic" && (
      <>
        <label>
          Username:
          <input type="text" value={username} onChange={e => setUsername(e.target.value)} />
        </label>
        <label>
          Password:
          <input type="password" value={password} onChange={e => setPassword(e.target.value)} />
        </label>
      </>
    )}
    {authType === "bearer" && (
      <label>
        Token:
        <input type="text" value={token} onChange={e => setToken(e.target.value)} />
      </label>
    )}
    <button onClick={saveTest}>Save</button>
    <button onClick={() => setIsModalOpen(false)}>Cancel</button>
  </div>
)}





import React, { useState } from 'react';

// Define the types
interface Auth {
  type: string;
  username?: string;
  password?: string;
  token?: string;
}

interface Test {
  testName: string;
  api: string;
  auth: Auth;
}

interface Service {
  ServiceName: string;
  tests: Test[];
}

interface FormState {
  AppName: string;
  Services: Service[];
}

// Initial form state (adjust as needed)
const initialFormState: FormState = {
  AppName: '',
  Services: []
};

const App: React.FC = () => {
  const [formState, setFormState] = useState<FormState>(initialFormState);
  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
  const [currentServiceIndex, setCurrentServiceIndex] = useState<number | null>(null);
  const [currentTestIndex, setCurrentTestIndex] = useState<number | null>(null);
  const [testName, setTestName] = useState<string>("");
  const [api, setApi] = useState<string>("");
  const [authType, setAuthType] = useState<string>("");
  const [username, setUsername] = useState<string>("");
  const [password, setPassword] = useState<string>("");
  const [token, setToken] = useState<string>("");

  const addTest = () => {
    if (currentServiceIndex !== null) {
      const newTest: Test = {
        testName,
        api,
        auth: { type: authType, username, password, token }
      };

      setFormState(prevState => {
        const updatedServices = [...prevState.Services];
        updatedServices[currentServiceIndex] = {
          ...updatedServices[currentServiceIndex],
          tests: [...updatedServices[currentServiceIndex].tests, newTest]
        };
        return { ...prevState, Services: updatedServices };
      });

      // Reset input fields
      setTestName("");
      setApi("");
      setAuthType("");
      setUsername("");
      setPassword("");
      setToken("");

      // Close the modal
      setIsModalOpen(false);
    }
  };

  const saveTest = () => {
    if (currentServiceIndex !== null) {
      const updatedServices = [...formState.Services];

      if (currentTestIndex === null) {
        // Adding new test
        const newTest: Test = {
          testName,
          api,
          auth: { type: authType, username, password, token }
        };
        updatedServices[currentServiceIndex] = {
          ...updatedServices[currentServiceIndex],
          tests: [...updatedServices[currentServiceIndex].tests, newTest]
        };
      } else {
        // Editing existing test
        const updatedTest: Test = {
          testName,
          api,
          auth: { type: authType, username, password, token }
        };
        updatedServices[currentServiceIndex] = {
          ...updatedServices[currentServiceIndex],
          tests: updatedServices[currentServiceIndex].tests.map((test, index) =>
            index === currentTestIndex ? updatedTest : test
          )
        };
      }

      setFormState({ ...formState, Services: updatedServices });

      // Reset input fields and close the modal
      setTestName("");
      setApi("");
      setAuthType("");
      setUsername("");
      setPassword("");
      setToken("");
      setIsModalOpen(false);
    }
  };

  const openModalForAdd = (index: number) => {
    setCurrentServiceIndex(index);
    setCurrentTestIndex(null);
    setTestName("");
    setApi("");
    setAuthType("");
    setUsername("");
    setPassword("");
    setToken("");
    setIsModalOpen(true);
  };

  const openModalForEdit = (serviceIndex: number, testIndex: number) => {
    const test = formState.Services[serviceIndex].tests[testIndex];
    setCurrentServiceIndex(serviceIndex);
    setCurrentTestIndex(testIndex);
    setTestName(test.testName);
    setApi(test.api);
    setAuthType(test.auth.type);
    setUsername(test.auth.username || "");
    setPassword(test.auth.password || "");
    setToken(test.auth.token || "");
    setIsModalOpen(true);
  };

  return (
    <div>
      <h1>Application: {formState.AppName}</h1>
      {formState.Services.map((service, index) => (
        <div key={index}>
          <h2>Service: {service.ServiceName}</h2>
          <button onClick={() => openModalForAdd(index)}>Add Test</button>
          <ul>
            {service.tests.map((test, testIndex) => (
              <li key={testIndex}>
                {test.testName} - {test.api}
                <button onClick={() => openModalForEdit(index, testIndex)}>Edit</button>
              </li>
            ))}
          </ul>
        </div>
      ))}

      {isModalOpen && (
        <div className="modal">
          <h2>{currentTestIndex === null ? "Add Test" : "Edit Test"}</h2>
          <label>
            Test Name:
            <input type="text" value={testName} onChange={e => setTestName(e.target.value)} />
          </label>
          <label>
            API:
            <input type="text" value={api} onChange={e => setApi(e.target.value)} />
          </label>
          <label>
            Authentication Type:
            <select value={authType} onChange={e => setAuthType(e.target.value)}>
              <option value="">Select Auth Type</option>
              <option value="basic">Basic</option>
              <option value="bearer">Bearer</option>
            </select>
          </label>
          {authType === "basic" && (
            <>
              <label>
                Username:
                <input type="text" value={username} onChange={e => setUsername(e.target.value)} />
              </label>
              <label>
                Password:
                <input type="password" value={password} onChange={e => setPassword(e.target.value)} />
              </label>
            </>
          )}
          {authType === "bearer" && (
            <label>
              Token:
              <input type="text" value={token} onChange={e => setToken(e.target.value)} />
            </label>
          )}
          <button onClick={saveTest}>Save</button>
          <button onClick={() => setIsModalOpen(false)}>Cancel</button>
        </div>
      )}
    </div>
  );
};

export default App;

