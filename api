npm install axios

Step 2: Update the API Service
Create a new file called api.ts to define your API calls:

import axios from 'axios';

const BASE_URL = 'https://localhost:8080';

export const onboardUser = async (data: any) => {
    const response = await axios.post(`${BASE_URL}/onboard`, data);
    return response.data;
};

export const saveData = async (data: any) => {
    const response = await axios.post(`${BASE_URL}/save`, data);
    return response.data;
};

Step 3: Integrate API Calls in Your Component
In your App component, import the API functions and call them in the addTest and saveTest functions.

Hereâ€™s the updated code:


import React, { useState } from 'react';
import { onboardUser, saveData } from './api'; // Import API functions

// ... [your existing types and initial state] ...

const App: React.FC = () => {
  // ... [your existing useState hooks] ...

  const addTest = async () => {
    if (currentServiceIndex !== null) {
      const newTest: Test = {
        testName,
        api,
        auth: { type: authType, username, password, token },
        headers: {
          pre_header_var: preHeaderVars,
          required: requiredHeaders
        }
      };

      setFormState(prevState => {
        const updatedServices = [...prevState.Services];
        updatedServices[currentServiceIndex] = {
          ...updatedServices[currentServiceIndex],
          tests: [...updatedServices[currentServiceIndex].tests, newTest]
        };
        return { ...prevState, Services: updatedServices };
      });

      try {
        // Call the onboard API when adding a test
        await onboardUser(newTest);
        console.log('User onboarded:', newTest);
      } catch (error) {
        console.error('Error onboarding user:', error);
      }

      // Reset input fields
      resetFields();
      setIsModalOpen(false);
    }
  };

  const saveTest = async () => {
    if (currentServiceIndex !== null) {
      const updatedServices = [...formState.Services];
      const updatedTest: Test = {
        testName,
        api,
        auth: { type: authType, username, password, token },
        headers: {
          pre_header_var: preHeaderVars,
          required: requiredHeaders
        }
      };

      if (currentTestIndex === null) {
        // Adding new test
        updatedServices[currentServiceIndex] = {
          ...updatedServices[currentServiceIndex],
          tests: [...updatedServices[currentServiceIndex].tests, updatedTest]
        };
      } else {
        // Editing existing test
        updatedServices[currentServiceIndex] = {
          ...updatedServices[currentServiceIndex],
          tests: updatedServices[currentServiceIndex].tests.map((test, index) =>
            index === currentTestIndex ? updatedTest : test
          )
        };
      }

      setFormState({ ...formState, Services: updatedServices });

      try {
        // Call the save API when saving a test
        await saveData(updatedTest);
        console.log('Data saved:', updatedTest);
      } catch (error) {
        console.error('Error saving data:', error);
      }

      // Reset input fields and close the modal
      resetFields();
      setIsModalOpen(false);
    }
  };

  const resetFields = () => {
    setTestName("");
    setApi("");
    setAuthType("");
    setUsername("");
    setPassword("");
    setToken("");
    setPreHeaderVars([]);
    setRequiredHeaders([]);
  };

  // ... [your existing component code] ...
  
  return (
    <div>
      <h1>Application: {formState.AppName}</h1>
      {formState.Services.map((service, index) => (
        <div key={index}>
          <h2>Service: {service.ServiceName}</h2>
          <button onClick={() => openModalForAdd(index)}>Add Test</button>
          <ul>
            {service.tests.map((test, testIndex) => (
              <li key={testIndex}>
                {test.testName} - {test.api}
                <button onClick={() => openModalForEdit(index, testIndex)}>Edit</button>
              </li>
            ))}
          </ul>
        </div>
      ))}

      {isModalOpen && (
        <div className="modal">
          <h2>{currentTestIndex === null ? "Add Test" : "Edit Test"}</h2>
          {/* Input fields for test details */}
          <button onClick={currentTestIndex === null ? addTest : saveTest}>Save</button>
          <button onClick={() => setIsModalOpen(false)}>Cancel</button>
        </div>
      )}
    </div>
  );
};

export default App;

Explanation of Changes:
API Calls: Integrated onboardUser in the addTest function and saveData in the saveTest function to send data to your backend.
Error Handling: Added try-catch blocks around the API calls to handle any errors gracefully.
Field Resetting: Created a resetFields function to avoid code duplication when resetting input fields.
With these changes, your component will now make API calls to the backend when tests are added or saved, using the provided REST services. Adjust the API call data structure as necessary based on the expected payloads in your Go backend.




import React, { useState } from 'react';
import { onboardUser, saveData } from './api'; // Import API functions

// Define types if necessary
// ...

const App: React.FC = () => {
  const [formState, setFormState] = useState({ Services: [], AppName: '' });
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isServiceModalOpen, setIsServiceModalOpen] = useState(false);
  const [currentServiceIndex, setCurrentServiceIndex] = useState<number | null>(null);
  const [currentTestIndex, setCurrentTestIndex] = useState<number | null>(null);
  
  // State for test inputs
  const [testName, setTestName] = useState('');
  const [api, setApi] = useState('');
  const [authType, setAuthType] = useState('');
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [token, setToken] = useState('');
  const [preHeaderVars, setPreHeaderVars] = useState([]);
  const [requiredHeaders, setRequiredHeaders] = useState([]);

  // State for new service
  const [newServiceName, setNewServiceName] = useState('');

  const addService = () => {
    if (newServiceName.trim()) {
      const newService = { ServiceName: newServiceName, tests: [] };
      setFormState(prevState => ({
        ...prevState,
        Services: [...prevState.Services, newService]
      }));
      resetServiceFields();
      setIsServiceModalOpen(false);
    }
  };

  const resetServiceFields = () => {
    setNewServiceName('');
  };

  const addTest = async () => {
    if (currentServiceIndex !== null) {
      const newTest = {
        testName,
        api,
        auth: { type: authType, username, password, token },
        headers: {
          pre_header_var: preHeaderVars,
          required: requiredHeaders
        }
      };

      setFormState(prevState => {
        const updatedServices = [...prevState.Services];
        updatedServices[currentServiceIndex] = {
          ...updatedServices[currentServiceIndex],
          tests: [...updatedServices[currentServiceIndex].tests, newTest]
        };
        return { ...prevState, Services: updatedServices };
      });

      try {
        await onboardUser(newTest);
        console.log('User onboarded:', newTest);
      } catch (error) {
        console.error('Error onboarding user:', error);
      }

      resetFields();
      setIsModalOpen(false);
    }
  };

  const saveTest = async () => {
    if (currentServiceIndex !== null) {
      const updatedServices = [...formState.Services];
      const updatedTest = {
        testName,
        api,
        auth: { type: authType, username, password, token },
        headers: {
          pre_header_var: preHeaderVars,
          required: requiredHeaders
        }
      };

      if (currentTestIndex === null) {
        updatedServices[currentServiceIndex] = {
          ...updatedServices[currentServiceIndex],
          tests: [...updatedServices[currentServiceIndex].tests, updatedTest]
        };
      } else {
        updatedServices[currentServiceIndex] = {
          ...updatedServices[currentServiceIndex],
          tests: updatedServices[currentServiceIndex].tests.map((test, index) =>
            index === currentTestIndex ? updatedTest : test
          )
        };
      }

      setFormState({ ...formState, Services: updatedServices });

      try {
        await saveData(updatedTest);
        console.log('Data saved:', updatedTest);
      } catch (error) {
        console.error('Error saving data:', error);
      }

      resetFields();
      setIsModalOpen(false);
    }
  };

  const resetFields = () => {
    setTestName('');
    setApi('');
    setAuthType('');
    setUsername('');
    setPassword('');
    setToken('');
    setPreHeaderVars([]);
    setRequiredHeaders([]);
  };

  return (
    <div>
      <h1>Application: {formState.AppName}</h1>
      <button onClick={() => setIsServiceModalOpen(true)}>Add Service</button>
      {formState.Services.map((service, index) => (
        <div key={index}>
          <h2>Service: {service.ServiceName}</h2>
          <button onClick={() => openModalForAdd(index)}>Add Test</button>
          <ul>
            {service.tests.map((test, testIndex) => (
              <li key={testIndex}>
                {test.testName} - {test.api}
                <button onClick={() => openModalForEdit(index, testIndex)}>Edit</button>
              </li>
            ))}
          </ul>
        </div>
      ))}

      {isModalOpen && (
        <div className="modal">
          <h2>{currentTestIndex === null ? 'Add Test' : 'Edit Test'}</h2>
          {/* Input fields for test details */}
          <button onClick={currentTestIndex === null ? addTest : saveTest}>Save</button>
          <button onClick={() => setIsModalOpen(false)}>Cancel</button>
        </div>
      )}

      {isServiceModalOpen && (
        <div className="modal">
          <h2>Add Service</h2>
          <input
            type="text"
            placeholder="Service Name"
            value={newServiceName}
            onChange={(e) => setNewServiceName(e.target.value)}
          />
          <button onClick={addService}>Add Service</button>
          <button onClick={() => setIsServiceModalOpen(false)}>Cancel</button>
        </div>
      )}
    </div>
  );
};

export default App;



