import React, { useState } from "react";
import { Service, Test } from "./types";

const ServicesManager: React.FC = () => {
  const [services, setServices] = useState<Service[]>([]);
  const [expandedServiceIndex, setExpandedServiceIndex] = useState<number | null>(null);
  const [newServiceName, setNewServiceName] = useState<string>("");
  const [newTestName, setNewTestName] = useState<string>("");
  const [newTestUrl, setNewTestUrl] = useState<string>("");

  // Handle adding a new service
  const addService = () => {
    if (expandedServiceIndex !== null) {
      // Collapse the previous service before adding the new one
      setExpandedServiceIndex(null);
    }
    // Set the current service name input to add a new service
    setNewServiceName("");
  };

  // Add a new test to the selected service
  const addTest = (serviceIndex: number) => {
    const updatedServices = [...services];
    const newTest: Test = { testName: newTestName, url: newTestUrl };
    updatedServices[serviceIndex].tests.push(newTest);
    setServices(updatedServices);
    setNewTestName("");
    setNewTestUrl("");
  };

  // Delete a test from a service
  const deleteTest = (serviceIndex: number, testIndex: number) => {
    const updatedServices = [...services];
    updatedServices[serviceIndex].tests.splice(testIndex, 1);
    setServices(updatedServices);
  };

  // Collapse or expand the selected service
  const toggleExpandService = (index: number) => {
    setExpandedServiceIndex(expandedServiceIndex === index ? null : index);
  };

  // Handle saving a new service
  const saveService = () => {
    if (newServiceName.trim()) {
      const newService: Service = {
        serviceName: newServiceName,
        tests: []
      };
      setServices([...services, newService]);
      setNewServiceName("");  // Clear the input after adding
      setExpandedServiceIndex(null);  // Collapse the form
    }
  };

  return (
    <div>
      <button onClick={addService}>Add Service</button>
      {expandedServiceIndex === null && newServiceName !== "" && (
        <div>
          <input
            type="text"
            value={newServiceName}
            onChange={(e) => setNewServiceName(e.target.value)}
            placeholder="Enter service name"
          />
          <button onClick={saveService}>Save Service</button>
        </div>
      )}
      {services.map((service, serviceIndex) => (
        <div key={serviceIndex}>
          <div>
            {expandedServiceIndex === serviceIndex ? (
              <div>
                <div>
                  <span>{service.serviceName}</span>
                  <button onClick={() => toggleExpandService(serviceIndex)}>Collapse</button>
                </div>

                {/* Test Section */}
                <div>
                  <input
                    type="text"
                    placeholder="Test Name"
                    value={newTestName}
                    onChange={(e) => setNewTestName(e.target.value)}
                  />
                  <input
                    type="text"
                    placeholder="Test URL"
                    value={newTestUrl}
                    onChange={(e) => setNewTestUrl(e.target.value)}
                  />
                  <button onClick={() => addTest(serviceIndex)}>Add Test</button>

                  <div>
                    {service.tests.map((test, testIndex) => (
                      <div key={testIndex}>
                        <span>{test.testName}</span> - <span>{test.url}</span>
                        <button onClick={() => deleteTest(serviceIndex, testIndex)}>Delete</button>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            ) : (
              <div>
                <span>{service.serviceName}</span>
                <button onClick={() => toggleExpandService(serviceIndex)}>Expand</button>
              </div>
            )}
          </div>
        </div>
      ))}
    </div>
  );
};

export default ServicesManager;
