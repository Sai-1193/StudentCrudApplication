import React, { useState } from 'react';

const MyFormComponent: React.FC = () => {
  const [formState, setFormState] = useState<FormState>({
    car_id: ,
    user: '',
    applicationName: 'ec',
    fileCount: 1,
    fileSequence: 1,
    requestFile: 'em_request_1.yml',
    services: '',
    serviceName: 'tests',
    testName: 'suspend Refresh',
    api: 'api/v1/suspe',
    method: 'POST',
    request: {
      auth: 1,
      type: 'Bearer Token',
      username: '',
      password: '',
      headers: {
        pre_header_var: [
          { key: [1], required: [0], body: 1, pre_request_var: 0, path: 'type', values: ['otp', 'totp', 'msg'] }
        ],
        response: 1,
        headers: [{ key: 'Content-Type', value: 'application/json', required: [1] }],
      },
      expect: '',
      statusCode: [200],
      required: ['refid'],
    },
    variables: [{ key: 'eob', value: 'dev' }],
  });

  const [errors, setErrors] = useState<{ [key: string]: string }>({});

  const validateForm = () => {
    const newErrors: { [key: string]: string } = {};

    // Validate top-level fields
    if (!formState.user) newErrors.user = 'User is required.';
    if (!formState.applicationName) newErrors.applicationName = 'Application name is required.';
    if (formState.fileCount <= 0) newErrors.fileCount = 'File count must be greater than 0.';
    if (formState.fileSequence <= 0) newErrors.fileSequence = 'File sequence must be greater than 0.';
    if (!formState.requestFile) newErrors.requestFile = 'Request file is required.';
    if (!formState.services) newErrors.services = 'Services are required.';
    if (!formState.serviceName) newErrors.serviceName = 'Service name is required.';
    if (!formState.testName) newErrors.testName = 'Test name is required.';
    if (!formState.api) newErrors.api = 'API endpoint is required.';
    if (!formState.method) newErrors.method = 'Method is required.';

    // Validate request object
    if (formState.request.auth < 0) newErrors.auth = 'Auth must be a positive number.';
    if (!formState.request.type) newErrors.type = 'Request type is required.';
    if (!formState.request.username) newErrors.username = 'Username is required.';
    if (!formState.request.password) newErrors.password = 'Password is required.';

    // Validate headers
    if (!formState.request.headers.pre_header_var.length) {
      newErrors.pre_header_var = 'Pre-header variables are required.';
    }

    formState.request.headers.headers.forEach((header, index) => {
      if (!header.key) {
        newErrors[`header_${index}_key`] = `Header key at index ${index} is required.`;
      }
      if (!header.value) {
        newErrors[`header_${index}_value`] = `Header value at index ${index} is required.`;
      }
    });

    // Validate variables
    formState.variables.forEach((variable, index) => {
      if (!variable.key) {
        newErrors[`variable_${index}_key`] = `Variable key at index ${index} is required.`;
      }
    });

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0; // Returns true if no errors
  };

  const handleSubmit = (event: React.FormEvent) => {
    event.preventDefault();
    if (validateForm()) {
      // Proceed with form submission
      console.log('Form is valid. Submitting...', formState);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input 
        type="text" 
        value={formState.user} 
        onChange={(e) => setFormState({ ...formState, user: e.target.value })} 
        placeholder="User" 
      />
      {errors.user && <span>{errors.user}</span>}

      <input 
        type="text" 
        value={formState.applicationName} 
        onChange={(e) => setFormState({ ...formState, applicationName: e.target.value })} 
        placeholder="Application Name" 
      />
      {errors.applicationName && <span>{errors.applicationName}</span>}

      <input 
        type="number" 
        value={formState.fileCount} 
        onChange={(e) => setFormState({ ...formState, fileCount: Number(e.target.value) })} 
        placeholder="File Count" 
      />
      {errors.fileCount && <span>{errors.fileCount}</span>}

      <input 
        type="number" 
        value={formState.fileSequence} 
        onChange={(e) => setFormState({ ...formState, fileSequence: Number(e.target.value) })} 
        placeholder="File Sequence" 
      />
      {errors.fileSequence && <span>{errors.fileSequence}</span>}

      <input 
        type="text" 
        value={formState.requestFile} 
        onChange={(e) => setFormState({ ...formState, requestFile: e.target.value })} 
        placeholder="Request File" 
      />
      {errors.requestFile && <span>{errors.requestFile}</span>}

      <input 
        type="text" 
        value={formState.services} 
        onChange={(e) => setFormState({ ...formState, services: e.target.value })} 
        placeholder="Services" 
      />
      {errors.services && <span>{errors.services}</span>}

      <input 
        type="text" 
        value={formState.serviceName} 
        onChange={(e) => setFormState({ ...formState, serviceName: e.target.value })} 
        placeholder="Service Name" 
      />
      {errors.serviceName && <span>{errors.serviceName}</span>}

      <input 
        type="text" 
        value={formState.testName} 
        onChange={(e) => setFormState({ ...formState, testName: e.target.value })} 
        placeholder="Test Name" 
      />
      {errors.testName && <span>{errors.testName}</span>}

      <input 
        type="text" 
        value={formState.api} 
        onChange={(e) => setFormState({ ...formState, api: e.target.value })} 
        placeholder="API Endpoint" 
      />
      {errors.api && <span>{errors.api}</span>}

      <input 
        type="text" 
        value={formState.method} 
        onChange={(e) => setFormState({ ...formState, method: e.target.value })} 
        placeholder="Method" 
      />
      {errors.method && <span>{errors.method}</span>}

      <input 
        type="text" 
        value={formState.request.username} 
        onChange={(e) => setFormState({ 
          ...formState, 
          request: { ...formState.request, username: e.target.value }
        })} 
        placeholder="Username" 
      />
      {errors.username && <span>{errors.username}</span>}

      <input 
        type="password" 
        value={formState.request.password} 
        onChange={(e) => setFormState({ 
          ...formState, 
          request: { ...formState.request, password: e.target.value }
        })} 
        placeholder="Password" 
      />
      {errors.password && <span>{errors.password}</span>}

      {formState.request.headers.pre_header_var.length === 0 ? (
        <span>{errors.pre_header_var}</span>
      ) : null}

      {formState.request.headers.headers.map((header, index) => (
        <div key={index}>
          <input 
            type="text" 
            value={header.key} 
            onChange={(e) => {
              const newHeaders = [...formState.request.headers.headers];
              newHeaders[index].key = e.target.value;
              setFormState({ ...formState, request: { ...formState.request, headers: { ...formState.request.headers, headers: newHeaders } } });
            }} 
            placeholder={`Header ${index} Key`} 
          />
          {errors[`header_${index}_key`] && <span>{errors[`header_${index}_key`]}</span>}

          <input 
            type="text" 
            value={header.value} 
            onChange={(e) => {
              const newHeaders = [...formState.request.headers.headers];
              newHeaders[index].value = e.target.value;
              setFormState({ ...formState, request: { ...formState.request, headers: { ...formState.request.headers, headers: newHeaders } } });
            }} 
            placeholder={`Header ${index} Value`} 
          />
          {errors[`header_${index}_value`] && <span>{errors[`header_${index}_value`]}</span>}
       
