import React, { useState } from 'react';
import yaml from 'json-yaml';

// Define interfaces for application and test
interface Test {
  name: string;
}

interface Application {
  name: string;
  tests: Test[];
}

const YamlEditor: React.FC = () => {
  const [yamlText, setYamlText] = useState<string>('');
  const [jsonText, setJsonText] = useState<string>('');
  const [applications, setApplications] = useState<Application[]>([]);
  const [modalVisible, setModalVisible] = useState<boolean>(false);
  const [newTestName, setNewTestName] = useState<string>('');
  const [selectedAppIndex, setSelectedAppIndex] = useState<number | null>(null);
  const [newAppName, setNewAppName] = useState<string>('');

  // Handle YAML changes
  const handleYamlChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {
    const newYamlText = event.target.value;
    setYamlText(newYamlText);

    try {
      const jsonObject = yaml.parse(newYamlText);
      setJsonText(JSON.stringify(jsonObject, null, 2));
    } catch (error) {
      setJsonText('Invalid YAML');
    }
  };

  // Toggle modal visibility
  const toggleModal = () => {
    setModalVisible(!modalVisible);
  };

  // Add a new application
  const addApplication = () => {
    if (newAppName.trim()) {
      setApplications([...applications, { name: newAppName, tests: [] }]);
      setNewAppName(''); // Clear the input field
    }
  };

  // Add a new test to the selected application
  const addTest = () => {
    if (selectedAppIndex !== null && newTestName.trim()) {
      const updatedApps = [...applications];
      updatedApps[selectedAppIndex].tests.push({ name: newTestName });
      setApplications(updatedApps);
      setNewTestName(''); // Clear the input field
      toggleModal(); // Close the modal
    }
  };

  return (
    <div style={{ display: 'flex', height: '100vh' }}>
      <div style={{ flex: 1, padding: '10px', borderRight: '1px solid #ccc' }}>
        <h3>YAML Editor</h3>
        <textarea
          value={yamlText}
          onChange={handleYamlChange}
          rows={20}
          style={{ width: '100%', fontFamily: 'monospace' }}
        />
        <button onClick={toggleModal} style={{ marginTop: '10px' }}>Add Test</button>
        <ul>
          {applications.map((app, appIndex) => (
            <li key={appIndex}>
              <strong>{app.name}</strong>
              <ul>
                {app.tests.map((test, testIndex) => (
                  <li key={testIndex}>{test.name}</li>
                ))}
              </ul>
            </li>
          ))}
        </ul>
        <input
          type="text"
          value={newAppName}
          onChange={(e) => setNewAppName(e.target.value)}
          placeholder="Enter application name"
        />
        <button onClick={addApplication}>Add Application</button>
      </div>
      <div style={{ flex: 1, padding: '10px' }}>
        <h3>JSON Viewer</h3>
        <pre style={{ whiteSpace: 'pre-wrap', wordBreak: 'break-word' }}>
          {jsonText}
        </pre>
      </div>
      {modalVisible && (
        <div style={{
          position: 'fixed',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          padding: '20px',
          border: '1px solid #ccc',
          backgroundColor: 'white',
          zIndex: 1000
        }}>
          <h4>Add Test</h4>
          <input
            type="text"
            value={newTestName}
            onChange={(e) => setNewTestName(e.target.value)}
            placeholder="Enter test name"
          />
          <button onClick={addTest}>Add</button>
          <button onClick={toggleModal} style={{ marginLeft: '10px' }}>Close</button>
        </div>
      )}
      {modalVisible && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          width: '100%',
          height: '100%',
          backgroundColor: 'rgba(0,0,0,0.5)',
          zIndex: 999
        }}></div>
      )}
    </div>
  );
};

export default YamlEditor;
