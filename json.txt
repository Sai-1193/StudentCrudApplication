package main

import (
    "encoding/json"
    "fmt"
    "io/ioutil"
    "log"

    "github.com/go-resty/resty/v2"
)

// Define a struct to represent the Postman collection.
type PostmanCollection struct {
    Info struct {
        Name string `json:"name"`
    } `json:"info"`
    Item []struct {
        Name    string `json:"name"`
        Request struct {
            Method string `json:"method"`
            URL    struct {
                Raw string `json:"raw"`
            } `json:"url"`
            // Add other request details as needed.
        } `json:"request"`
    } `json:"item"`
}

func main() {
    // Read the Postman collection JSON file (adjust the file path accordingly).
    collectionJSON, err := ioutil.ReadFile("places.postman_collection.json")
    if err != nil {
        log.Fatal(err)
    }

    // Parse the JSON content into a PostmanCollection struct.
    var postmanCollection PostmanCollection
    err = json.Unmarshal(collectionJSON, &postmanCollection)
    if err != nil {
        log.Fatal(err)
    }

    // Initialize Go-Resty client.
    client := resty.New()

    // Iterate through the Postman collection and make requests.
    for _, item := range postmanCollection.Item {
        switch item.Request.Method {
        case "GET":
            makeGETRequest(client, item.Request.URL.Raw)
        case "POST":
            makePOSTRequest(client, item.Request.URL.Raw)
        case "PUT":
            makePUTRequest(client, item.Request.URL.Raw)
        }
    }
}

func makeGETRequest(client *resty.Client, url string) {
    // Make a GET request using Go-Resty.
    resp, err := client.R().Get(url)
    if err != nil {
        log.Fatal(err)
    }
    fmt.Println("GET Request Response:", resp)
}

func makePOSTRequest(client *resty.Client, url string) {
    // Make a POST request using Go-Resty (similar to GET but with .Post method).
    resp, err := client.R().Post(url)
    if err != nil {
        log.Fatal(err)
    }
    fmt.Println("POST Request Response:", resp)
}

func makePUTRequest(client *resty.Client, url string) {
    // Make a PUT request using Go-Resty (similar to GET but with .Put method).
    resp, err := client.R().Put(url)
    if err != nil {
        log.Fatal(err)
    }
    fmt.Println("PUT Request Response:", resp)
}
