import React, { useState, useCallback } from 'react';
import { useDrag } from 'react-dnd';

// Types for Node and Edge
interface Position {
  x: number;
  y: number;
}

interface NodeData {
  id: string;
  label: string;
  position: Position;
}

interface EdgeData {
  source: string;
  target: string;
}

// Initial data for nodes and edges
const initialNodes: NodeData[] = [
  { id: '1', label: 'Cbis', position: { x: 50, y: 50 } },
  { id: '2', label: 'Ecm', position: { x: 200, y: 100 } },
  { id: '3', label: 'Ewp', position: { x: 350, y: 200 } },
  { id: '4', label: 'Apigee', position: { x: 500, y: 300 } },
  { id: '5', label: 'Logon', position: { x: 650, y: 400 } },
];

const initialEdges: EdgeData[] = [
  { source: '1', target: '3' },
  { source: '3', target: '4' },
  { source: '3', target: '5' },
  { source: '1', target: '2' },
];

// Node component with drag functionality
const DraggableNode: React.FC<NodeData & { moveNode: (id: string, newPosition: Position) => void }> = ({
  id,
  label,
  position,
  moveNode,
}) => {
  const [{ isDragging }, drag] = useDrag(() => ({
    type: 'node',
    item: { id, position },
    collect: (monitor) => ({
      isDragging: monitor.isDragging(),
    }),
    end: (item, monitor) => {
      const delta = monitor.getDifferenceFromInitialOffset();
      if (delta) {
        moveNode(id, { x: position.x + delta.x, y: position.y + delta.y });
      }
    },
  }));

  return (
    <g ref={drag} transform={`translate(${position.x},${position.y})`}>
      <circle r="20" fill="#00aaff" />
      <text x="0" y="30" textAnchor="middle" fontSize="14" fill="#fff" style={{ userSelect: 'none' }}>
        {label}
      </text>
    </g>
  );
};

// Edge component for arrows
const Edge: React.FC<{ source: Position; target: Position }> = ({ source, target }) => {
  const pathData = `M ${source.x} ${source.y} L ${target.x} ${target.y}`;
  return (
    <g>
      <path d={pathData} stroke="#ff6347" strokeWidth="2" fill="none" />
      <polygon points={`${target.x},${target.y} ${target.x - 10},${target.y - 5} ${target.x - 10},${target.y + 5}`} fill="#ff6347" />
    </g>
  );
};

// FlowMap component with all nodes and edges
export const FlowMap: React.FC = () => {
  const [nodesState, setNodesState] = useState<NodeData[]>(initialNodes);
  const [edgesState, setEdgesState] = useState<EdgeData[]>(initialEdges);

  const [draggingEdge, setDraggingEdge] = useState<{ source: string | null; target: string | null }>({
    source: null,
    target: null,
  });

  // Function to update node position after drag
  const moveNode = (id: string, newPosition: Position) => {
    setNodesState((prevNodes) =>
      prevNodes.map((node) => (node.id === id ? { ...node, position: newPosition } : node))
    );
  };

  // Function to create an edge between nodes (fromNode -> toNode)
  const createEdge = (sourceId: string, targetId: string) => {
    setEdgesState((prevEdges) => {
      const newEdge: EdgeData = { source: sourceId, target: targetId };
      // Avoid duplicates
      return prevEdges.some((edge) => edge.source === sourceId && edge.target === targetId)
        ? prevEdges
        : [...prevEdges, newEdge];
    });
  };

  // Function to initiate edge dragging
  const handleNodeClick = (id: string) => {
    if (draggingEdge.source === null) {
      setDraggingEdge({ source: id, target: null });
    } else {
      if (draggingEdge.source !== id) {
        createEdge(draggingEdge.source, id);
      }
      setDraggingEdge({ source: null, target: null });
    }
  };

  return (
    <div>
      <svg width="800" height="500" style={{ border: '1px solid #ccc' }}>
        {/* Render edges */}
        {edgesState.map((edge, index) => {
          const sourceNode = nodesState.find((node) => node.id === edge.source);
          const targetNode = nodesState.find((node) => node.id === edge.target);
          if (sourceNode && targetNode) {
            return <Edge key={index} source={sourceNode.position} target={targetNode.position} />;
          }
          return null;
        })}

        {/* Render draggable nodes */}
        {nodesState.map((node) => (
          <g key={node.id} onClick={() => handleNodeClick(node.id)}>
            <DraggableNode {...node} moveNode={moveNode} />
          </g>
        ))}
      </svg>

      {/* Edge Creation Feedback */}
      {draggingEdge.source && (
        <div style={{ marginTop: 10 }}>
          Drag from {draggingEdge.source} to another node to create a connection.
        </div>
      )}
    </div>
  );
};

import React, { useState, useCallback } from 'react';
import { useDrag } from 'react-dnd';

// Define Types for Nodes and Edges
interface Position {
  x: number;
  y: number;
}

interface NodeData {
  id: string;
  label: string;
  position: Position;
}

interface EdgeData {
  source: string;
  target: string;
}

// Initial nodes and edges data
const initialNodes: NodeData[] = [
  { id: '1', label: 'Cbis', position: { x: 50, y: 50 } },
  { id: '2', label: 'Ecm', position: { x: 200, y: 100 } },
  { id: '3', label: 'Ewp', position: { x: 350, y: 200 } },
  { id: '4', label: 'Apigee', position: { x: 500, y: 300 } },
  { id: '5', label: 'Logon', position: { x: 650, y: 400 } },
];

const initialEdges: EdgeData[] = [
  { source: '1', target: '3' },
  { source: '3', target: '4' },
  { source: '3', target: '5' },
  { source: '1', target: '2' },
];

// DraggableNode Component
const DraggableNode: React.FC<NodeData & { moveNode: (id: string, newPosition: Position) => void }> = ({
  id,
  label,
  position,
  moveNode,
}) => {
  const [{ isDragging }, drag] = useDrag(() => ({
    type: 'node',
    item: { id, position },
    collect: (monitor) => ({
      isDragging: monitor.isDragging(),
    }),
    end: (item, monitor) => {
      const delta = monitor.getDifferenceFromInitialOffset();
      if (delta) {
        moveNode(id, { x: position.x + delta.x, y: position.y + delta.y });
      }
    },
  }));

  return (
    <g ref={drag} transform={`translate(${position.x},${position.y})`}>
      <circle r="20" fill="#00aaff" />
      <text x="0" y="30" textAnchor="middle" fontSize="14" fill="#fff" style={{ userSelect: 'none' }}>
        {label}
      </text>
    </g>
  );
};

// Edge Component for Drawing Arrows
const Edge: React.FC<{ source: Position; target: Position }> = ({ source, target }) => {
  const pathData = `M ${source.x} ${source.y} L ${target.x} ${target.y}`;
  return (
    <g>
      <path d={pathData} stroke="#ff6347" strokeWidth="2" fill="none" />
      <polygon points={`${target.x},${target.y} ${target.x - 10},${target.y - 5} ${target.x - 10},${target.y + 5}`} fill="#ff6347" />
    </g>
  );
};

// FlowMap Component
export const FlowMap: React.FC = () => {
  const [nodesState, setNodesState] = useState<NodeData[]>(initialNodes);
  const [edgesState, setEdgesState] = useState<EdgeData[]>(initialEdges);

  // Move Node function to update the position in the state
  const moveNode = (id: string, newPosition: Position) => {
    setNodesState((prevNodes) =>
      prevNodes.map((node) => (node.id === id ? { ...node, position: newPosition } : node))
    );
  };

  // Create Edge between nodes
  const createEdge = (sourceId: string, targetId: string) => {
    setEdgesState((prevEdges) => {
      const newEdge: EdgeData = { source: sourceId, target: targetId };
      return prevEdges.some((edge) => edge.source === sourceId && edge.target === targetId)
        ? prevEdges
        : [...prevEdges, newEdge];
    });
  };

  // Handle Node Click for Edge Creation
  const handleNodeClick = (id: string) => {
    if (id) {
      createEdge(id, id);
    }
  };

  return (
    <div>
      <svg width="800" height="500" style={{ border: '1px solid #ccc' }}>
        {/* Render Edges */}
        {edgesState.map((edge, index) => {
          const sourceNode = nodesState.find((node) => node.id === edge.source);
          const targetNode = nodesState.find((node) => node.id === edge.target);
          if (sourceNode && targetNode) {
            return <Edge key={index} source={sourceNode.position} target={targetNode.position} />;
          }
          return null;
        })}

        {/* Render Draggable Nodes */}
        {nodesState.map((node) => (
          <g key={node.id} onClick={() => handleNodeClick(node.id)}>
            <DraggableNode {...node} moveNode={moveNode} />
          </g>
        ))}
      </svg>
    </div>
  );
};


