package main

import (
	"encoding/json"
	"fmt"
	"log"

	"github.com/go-resty/resty/v2"
)

type OpenAPI struct {
	Paths map[string]Path `json:"paths"`
}

type Path struct {
	Get  *Operation `json:"get,omitempty"`
	Post *Operation `json:"post,omitempty"`
}

type Operation struct {
	Summary string `json:"summary"`
}

func main() {
	// Initialize Resty Client
	client := resty.New()

	// Define the OpenAPI struct
	var openAPI OpenAPI

	// Unmarshal the OpenAPI JSON
	jsonStr := []byte(`{
        "paths": {
            "/todos": {
                "get": {
                    "summary": "Get all todos"
                },
                "post": {
                    "summary": "Create a new todo"
                }
            },
            "/users": {
                "get": {
                    "summary": "Get all users"
                }
            }
        }
    }`)

	err := json.Unmarshal(jsonStr, &openAPI)
	if err != nil {
		log.Fatalf("Error unmarshalling JSON: %v", err)
	}

	// Define base URL
	baseURL := "https://api.example.com"

	// Iterate over paths and perform GET and POST requests
	for path, pathInfo := range openAPI.Paths {
		// Make GET request if defined
		if pathInfo.Get != nil {
			resp, err := client.R().
				Get(baseURL + path)
			if err != nil {
				log.Printf("Error making GET request for %s: %v", path, err)
				continue
			}
			fmt.Printf("GET %s Response: %s\n", path, resp.String())
		}

		// Make POST request if defined
		if pathInfo.Post != nil {
			// Define request body (if required)
			// requestBody := map[string]interface{}{"key": "value"}
			// bodyJSON, _ := json.Marshal(requestBody)

			resp, err := client.R().
				// SetBody(bodyJSON).
				Post(baseURL + path)
			if err != nil {
				log.Printf("Error making POST request for %s: %v", path, err)
				continue
			}
			fmt.Printf("POST %s Response: %s\n", path, resp.String())
		}
	}
}




package main

import (
	"encoding/json"
	"fmt"
	"log"

	"github.com/go-resty/resty/v2"
)

type OpenAPI struct {
	Info       Info                  `json:"info"`
	Paths      map[string]Path       `json:"paths"`
	Components Components            `json:"components"`
}

type Info struct {
	Title   string `json:"title"`
	Version string `json:"version"`
}

type Path struct {
	Get    Operation `json:"get,omitempty"`
	Post   Operation `json:"post,omitempty"`
	Put    Operation `json:"put,omitempty"`
	Delete Operation `json:"delete,omitempty"`
}

type Operation struct {
	Summary     string              `json:"summary"`
	RequestBody *RequestBody        `json:"requestBody,omitempty"`
	Responses   map[string]Response `json:"responses"`
}

type RequestBody struct {
	Required bool               `json:"required"`
	Content  map[string]Content `json:"content"`
}

type Content struct {
	Schema Schema `json:"schema"`
}

type Response struct {
	Description string          `json:"description"`
	Content     map[string]Content `json:"content,omitempty"`
}

type Schema struct {
	Type       string            `json:"type"`
	Properties map[string]Property `json:"properties,omitempty"`
}

type Property struct {
	Type string `json:"type"`
}

type Components struct {
	Schemas map[string]Schema `json:"schemas"`
}

type Todo struct {
	ID        int    `json:"id"`
	Title     string `json:"title"`
	Completed bool   `json:"completed"`
}

func main() {
	// Initialize Resty Client
	client := resty.New()

	// Define the OpenAPI struct
	var openAPI OpenAPI

	// Unmarshal the OpenAPI JSON
	jsonStr := []byte(`{
		"info": {
			"title": "Todo List API",
			"version": "1.0.0"
		},
		"paths": {
			"/todos": {
				"get": {
					"summary": "Get all todos",
					"responses": {
						"200": {
							"description": "Successful response",
							"content": {
								"application/json": {
									"schema": {
										"type": "array",
										"items": {
											"$ref": "#/components/schemas/Todo"
										}
									}
								}
							}
						}
					}
				},
				"post": {
					"summary": "Create a new todo",
					"requestBody": {
						"required": true,
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Todo"
								}
							}
						}
					},
					"responses": {
						"201": {
							"description": "Todo created"
						}
					}
				}
			},
			"/todos/{id}": {
				"get": {
					"summary": "Get a todo by ID",
					"parameters": [
						{
							"name": "id",
							"in": "path",
							"required": true,
							"schema": {
								"type": "integer"
							}
						}
					],
					"responses": {
						"200": {
							"description": "Successful response",
							"content": {
								"application/json": {
									"schema": {
										"$ref": "#/components/schemas/Todo"
									}
								}
							}
						}
					}
				},
				"put": {
					"summary": "Update a todo by ID",
					"parameters": [
						{
							"name": "id",
							"in": "path",
							"required": true,
							"schema": {
								"type": "integer"
							}
						}
					],
					"requestBody": {
						"required": true,
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Todo"
								}
							}
						}
					},
					"responses": {
						"200": {
							"description": "Todo updated"
						}
					}
				}
			}
		},
		"components": {
			"schemas": {
				"Todo": {
					"type": "object",
					"properties": {
						"id": {
							"type": "integer"
						},
						"title": {
							"type": "string"
						},
						"completed": {
							"type": "boolean"
						}
					}
				}
			}
		}
	}`)

	err := json.Unmarshal(jsonStr, &openAPI)
	if err != nil {
		log.Fatalf("Error unmarshalling JSON: %v", err)
	}

	// Define base URL
	baseURL := "https://api.example.com"

	// Make GET request to retrieve all todos
	resp, err := client.R().
		SetResult([]Todo{}).
		Get(baseURL + "/todos")
	if err != nil {
		log.Fatalf("Error making GET request: %v", err)
	}
	fmt.Println("GET /todos Response:", resp.String())

	// Make POST request to create a new todo
	newTodo := Todo{ID: 1, Title: "New Todo", Completed: false}
	resp, err = client.R().
		SetBody(newTodo).
		Post(baseURL + "/todos")
	if err != nil {
		log.Fatalf("Error making POST request: %v", err)
	}
	fmt.Println("POST /todos Response:", resp.String())

	// Make PUT request to update a todo by ID
	updatedTodo := Todo{ID: 1, Title: "Updated Todo", Completed: true}
	resp, err = client.R().
		SetBody(updatedTodo).
		Put(baseURL + "/todos/1")
	if err != nil {
		log.Fatalf("Error making PUT request: %v", err)
	}
	fmt.Println("PUT /todos/1 Response:", resp.String())
}

